/* ------------------------------------------------------------------ */
/* decConst.cpp source file                                           */
/* ------------------------------------------------------------------ */
/* Copyright (c) IBM Corporation, 2006.  All rights reserved.         */
/*                                                                    */
/* This software is made available under the terms of the IBM         */
/* alphaWorks License Agreement (distributed with this software as    */
/* alphaWorks-License.txt).  Your use of this software indicates      */
/* your acceptance of the terms and conditions of that Agreement.     */
/*                                                                    */
/* Please send comments, suggestions, and corrections to the author:  */
/*   klarer@ca.ibm.com                                                */
/*   Robert Klarer                                                    */
/* ------------------------------------------------------------------ */

#include "decimal"

namespace ibm {
namespace decimal {

#if defined(_DEC_BIG_ENDIAN)
const uint8_t _FmtTraits<decimal32>::_Zero[] = {
0x22, 0x50, 0x0,  0x0
}; 

const uint8_t _FmtTraits<decimal32>::_Max[] = {
0x77, 0xF3, 0xFC, 0xFF
};

const uint8_t _FmtTraits<decimal32>::_Min[] = {
0x0,  0x60, 0x0,  0x1
};

const uint8_t _FmtTraits<decimal32>::_Epsilon[] = {
0x21, 0xF0, 0x0,  0x1
};

const uint8_t _FmtTraits<decimal32>::_Denormalized_min[] = {
0x0,  0x0,  0x0,  0x1
};

const uint8_t _FmtTraits<decimal32>::_INF[] = {
0x78, 0x0,  0x0,  0x0
};

const uint8_t _FmtTraits<decimal32>::_NAN[] = {
0x7C, 0x0,  0x0,  0x0
};

const uint8_t _FmtTraits<decimal32>::_SNAN[] = {
0x7E, 0x0,  0x0,  0x0
};

const uint8_t _FmtTraits<decimal64>::_Zero[] = {
0x22, 0x38, 0x0,  0x0,
0x0,  0x0,  0x0,  0x0
};

const uint8_t _FmtTraits<decimal64>::_Max[] = {
0x77, 0xFC, 0xFF, 0x3F,
0xCF, 0xF3, 0xFC, 0xFF
};

const uint8_t _FmtTraits<decimal64>::_Min[] = {
0x0,  0x3C, 0x0,  0x0,
0x0,  0x0,  0x0,  0x1
};

const uint8_t _FmtTraits<decimal64>::_Epsilon[] = {
0x21, 0xFC, 0x0,  0x0,
0x0,  0x0,  0x0,  0x1
};

const uint8_t _FmtTraits<decimal64>::_Denormalized_min[] = {
0x0,  0x0,  0x0,  0x0,
0x0,  0x0,  0x0,  0x1
};

const uint8_t _FmtTraits<decimal64>::_INF[] = {
0x78, 0x0,  0x0,  0x0,
0x0,  0x0,  0x0,  0x0
};

const uint8_t _FmtTraits<decimal64>::_NAN[] = {
0x7C, 0x0,  0x0,  0x0,
0x0,  0x0,  0x0,  0x0
};

const uint8_t _FmtTraits<decimal64>::_SNAN[] = {
0x7E, 0x0,  0x0,  0x0,
0x0,  0x0,  0x0,  0x0
};

const uint8_t _FmtTraits<decimal128>::_Zero[] = {
0x22, 0x8,  0x0,  0x0,
0x0,  0x0,  0x0,  0x0,
0x0,  0x0,  0x0,  0x0,
0x0,  0x0,  0x0,  0x0
}; 

const uint8_t _FmtTraits<decimal128>::_Max[] = {
0x77, 0xFF, 0xCF, 0xF3,
0xFC, 0xFF, 0x3F, 0xCF,
0xF3, 0xFC, 0xFF, 0x3F,
0xCF, 0xF3, 0xFC, 0xFF
}; 

const uint8_t _FmtTraits<decimal128>::_Min[] = {
0x0,  0x8,  0x40, 0x0,
0x0,  0x0,  0x0,  0x0,
0x0,  0x0,  0x0,  0x0,
0x0,  0x0,  0x0,  0x1
}; 

const uint8_t _FmtTraits<decimal128>::_Epsilon[] = {
0x21, 0xFF, 0xC0, 0x0,
0x0,  0x0,  0x0,  0x0,
0x0,  0x0,  0x0,  0x0,
0x0,  0x0,  0x0,  0x1
}; 

const uint8_t _FmtTraits<decimal128>::_Denormalized_min[] = {
0x0,  0x0,  0x0,  0x0,
0x0,  0x0,  0x0,  0x0,
0x0,  0x0,  0x0,  0x0,
0x0,  0x0,  0x0,  0x1
}; 

const uint8_t _FmtTraits<decimal128>::_INF[] = {
0x78, 0x0,  0x0,  0x0,
0x0,  0x0,  0x0,  0x0,
0x0,  0x0,  0x0,  0x0,
0x0,  0x0,  0x0,  0x0
}; 

const uint8_t _FmtTraits<decimal128>::_NAN[] = {
0x7C, 0x0,  0x0,  0x0,
0x0,  0x0,  0x0,  0x0,
0x0,  0x0,  0x0,  0x0,
0x0,  0x0,  0x0,  0x0
}; 

const uint8_t _FmtTraits<decimal128>::_SNAN[] = {
0x7E, 0x0,  0x0,  0x0,
0x0,  0x0,  0x0,  0x0,
0x0,  0x0,  0x0,  0x0,
0x0,  0x0,  0x0,  0x0
}; 

#elif defined(_DEC_LITTLE_ENDIAN)

const uint8_t _FmtTraits<decimal32>::_Zero[] = {
0x0,  0x0,  0x50, 0x22
}; 

const uint8_t _FmtTraits<decimal32>::_Max[] = {
0xFF, 0xFC, 0xF3, 0x77
};

const uint8_t _FmtTraits<decimal32>::_Min[] = {
0x1,  0x0,  0x60, 0x0
};

const uint8_t _FmtTraits<decimal32>::_Epsilon[] = {
0x1,  0x0,  0xF0, 0x21
};

const uint8_t _FmtTraits<decimal32>::_Denormalized_min[] = {
0x1,  0x0,  0x0,  0x0
};

const uint8_t _FmtTraits<decimal32>::_INF[] = {
0x0,  0x0,  0x0,  0x78
};

const uint8_t _FmtTraits<decimal32>::_NAN[] = {
0x0,  0x0,  0x0,  0x7C
};

const uint8_t _FmtTraits<decimal32>::_SNAN[] = {
0x0,  0x0,  0x0,  0x7E
};

const uint8_t _FmtTraits<decimal64>::_Zero[] = {
0x0,  0x0,  0x0,  0x0,
0x0,  0x0,  0x38, 0x22
};

const uint8_t _FmtTraits<decimal64>::_Max[] = {
0xFF, 0xFC, 0xF3, 0xCF,
0x3F, 0xFF, 0xFC, 0x77
};

const uint8_t _FmtTraits<decimal64>::_Min[] = {
0x1,  0x0,  0x0,  0x0,
0x0,  0x0,  0x3C, 0x0
};

const uint8_t _FmtTraits<decimal64>::_Epsilon[] = {
0x1,  0x0,  0x0,  0x0,
0x0,  0x0,  0xFC, 0x21
};

const uint8_t _FmtTraits<decimal64>::_Denormalized_min[] = {
0x1,  0x0,  0x0,  0x0,
0x0,  0x0,  0x0,  0x0
};

const uint8_t _FmtTraits<decimal64>::_INF[] = {
0x0,  0x0,  0x0,  0x0,
0x0,  0x0,  0x0,  0x78
};

const uint8_t _FmtTraits<decimal64>::_NAN[] = {
0x0,  0x0,  0x0,  0x0,
0x0,  0x0,  0x0,  0x7C
};

const uint8_t _FmtTraits<decimal64>::_SNAN[] = {
0x0,  0x0,  0x0,  0x0,
0x0,  0x0,  0x0,  0x7E
};

const uint8_t _FmtTraits<decimal128>::_Zero[] = {
0x0,  0x0,  0x0,  0x0,
0x0,  0x0,  0x0,  0x0,
0x0,  0x0,  0x0,  0x0,
0x0,  0x0,  0x8,  0x22
}; 

const uint8_t _FmtTraits<decimal128>::_Max[] = {
0xFF, 0xFC, 0xF3, 0xCF,
0x3F, 0xFF, 0xFC, 0xF3,
0xCF, 0x3F, 0xFF, 0xFC,
0xF3, 0xCF, 0xFF, 0x77
}; 

const uint8_t _FmtTraits<decimal128>::_Min[] = {
0x1,  0x0,  0x0,  0x0,
0x0,  0x0,  0x0,  0x0,
0x0,  0x0,  0x0,  0x0,
0x0,  0x40, 0x8,  0x0
}; 

const uint8_t _FmtTraits<decimal128>::_Epsilon[] = {
0x1,  0x0,  0x0,  0x0,
0x0,  0x0,  0x0,  0x0,
0x0,  0x0,  0x0,  0x0,
0x0,  0xC0, 0xFF, 0x21
}; 

const uint8_t _FmtTraits<decimal128>::_Denormalized_min[] = {
0x1,  0x0,  0x0,  0x0,
0x0,  0x0,  0x0,  0x0,
0x0,  0x0,  0x0,  0x0,
0x0,  0x0,  0x0,  0x0
}; 

const uint8_t _FmtTraits<decimal128>::_INF[] = {
0x0,  0x0,  0x0,  0x0,
0x0,  0x0,  0x0,  0x0,
0x0,  0x0,  0x0,  0x0,
0x0,  0x0,  0x0,  0x78
}; 

const uint8_t _FmtTraits<decimal128>::_NAN[] = {
0x0,  0x0,  0x0,  0x0,
0x0,  0x0,  0x0,  0x0,
0x0,  0x0,  0x0,  0x0,
0x0,  0x0,  0x0,  0x7C
}; 

const uint8_t _FmtTraits<decimal128>::_SNAN[] = {
0x0,  0x0,  0x0,  0x0,
0x0,  0x0,  0x0,  0x0,
0x0,  0x0,  0x0,  0x0,
0x0,  0x0,  0x0,  0x7E
}; 

#else
#  error "Invalid byte order format setting.  Please update decConfig.h."
#endif /* defined(_DEC_xxx_ENDIAN) */

} // namespace decimal
} // namespace ibm

