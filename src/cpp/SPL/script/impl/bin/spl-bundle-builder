#!/usr/bin/perl

#
# Copyright 2021 IBM Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

use strict;
use FindBin;
use lib "$FindBin::Bin";
use SPL::Helper;
use SPL::Msg;
use IO::File;
use XML::Simple;
$XML::Simple::PREFERRED_PARSER = "XML::Parser";
use File::Copy;
use File::Find;
use File::Basename;
use File::Path qw(mkpath rmtree);
use sigtrap qw{handler cleanup normal-signals error-signals};
use Cwd;

use utf8;

sub escapePath($);
sub runCommand($$);
sub makePathIfNecessary($);
sub cleanup();
sub addToTarFile($$$$);
sub buildOutputDirFileList($$);

$SIG{__DIE__}  = \&cleanup;

my $streamsInstall = $ENV{STREAMS_INSTALL};

my $fqOutputDirRoot = shift;
my $relOutputDir = shift;
my $adlFileName = shift;
my $bundleFileName = shift;

my $fqOutputDir = "$fqOutputDirRoot/$relOutputDir";
my $fqBundleFile = "$fqOutputDir/$bundleFileName";

# Remove the existing bundle
runCommand("/bin/rm -fr " . escapePath($fqBundleFile), 0);

# Remove the existing standalone script
my $fqScriptFile = "$fqOutputDir/bin/standalone";
runCommand("/bin/rm -fr " . escapePath($fqScriptFile), 1);

chdir($fqOutputDirRoot);

# Read in the bundle info file
my $bundleInfoFile = "$fqOutputDir/build/bundleInfo.xml";
my $fh = IO::File->new($bundleInfoFile);
my $xmlSimple = new XML::Simple;
my $xml = $xmlSimple->XMLin($fh, KeepRoot => 1, KeyAttr => [], ForceArray => 1);
close($fh);

my $relToolkitsDir = "$relOutputDir/toolkits";
makePathIfNecessary($relToolkitsDir);

# Copy over any toolkits
copyToolkits($relToolkitsDir, $xml);

# Build the tar file
my $relBundleWorkDir = "$relOutputDir/build/bundle";
my $relTarDir = "$relBundleWorkDir/tar";
makePathIfNecessary($relTarDir);

my $relTarFile = "$relTarDir/bundle.tar";
my $relBinDir = "$relOutputDir/bin";
my $relEtcDir = "$relOutputDir/etc";
my $relADLFile = "$relOutputDir/$adlFileName";
my $relJavaDir = "$relOutputDir/java";
my $relUsrImplDir = "$relOutputDir/usr/impl";
my $tarCmd = "/bin/tar -cf";
   $tarCmd .= " " . escapePath($relTarFile);
   $tarCmd .= " " . escapePath($relBinDir);
   $tarCmd .= " " . escapePath($relEtcDir);
   $tarCmd .= " " . escapePath($relToolkitsDir);
   $tarCmd .= " " . escapePath($relADLFile);
   $tarCmd .= " " . escapePath($relJavaDir) if (-e $relJavaDir);
   $tarCmd .= " " . escapePath($relUsrImplDir) if (-e $relUsrImplDir);
runCommand($tarCmd, 2);

# Tar up any extra files from the output directory
my $outputIncludes = $xml->{'bundleInfoModel'}->[0]->{'outputIncludes'};
if (defined($outputIncludes)) {
    my $includes = $outputIncludes->[0]->{'outputInclude'};
    my @regExs;
    foreach my $include (@{$includes}) {
        my $regEx = $include->{'path'};
        push(@regExs, $regEx);
    }
    my @outputFiles = buildOutputDirFileList($relOutputDir, $adlFileName);
    my @addedFiles = addToTarFile(\@regExs, \@outputFiles, $relOutputDir, $relTarFile);
    if (scalar @addedFiles > 0) {
        my $output = [];
        my $files = [];
        my $outputEntry = {};
        $outputEntry->{'file'} = $files;
        push(@$output, $outputEntry);
        foreach my $file (@addedFiles) {
            my $entry = {};
            $entry->{'name'} = $file;
            push(@$files, $entry);
        }
        $xml->{'bundleInfoModel'}->[0]->{'output'} = $output;
    }
}

# Create the sab (jar) file

# Patch the date into the bundleInfoModel
my $buildDate = time();
$xml->{'bundleInfoModel'}->[0]->{'buildDate'} = $buildDate;

# Compute the buildID
my $relEscapedTarFile = escapePath($relTarFile);
my $buildId = `sha224sum -b $relEscapedTarFile | awk '{print \$1}'`;

# Patch the build ID into the bundleInfoModel
chomp $buildId;
$xml->{'bundleInfoModel'}->[0]->{'buildId'} = $buildId;
delete $xml->{'bundleInfoModel'}->[0]->{'outputIncludes'};

# Write out the patched file
# The original bundleInfo file needs to remain as generated because the compiler checks it
my $relNewBundleInfoFile = "$relBundleWorkDir/bundleInfo.xml";
$xmlSimple->XMLout($xml, KeepRoot => 1, OutputFile => $relNewBundleInfoFile);

# Build the services file
my $relManifestDir = "$relBundleWorkDir/META-INF";
my $relServicesDir = "$relManifestDir/services";
makePathIfNecessary($relServicesDir);
my $relServicesFile = "$relServicesDir/com.ibm.streams.admin.internal.api.application.bundle.Bundle";
open SERVICESFILE, '>', $relServicesFile or SPLDie(1, SPL::Msg::CANNOT_OPEN_FILE_FOR_WRITING($relServicesFile));
print SERVICESFILE "com.ibm.streams.spl.compiler.application.bundle.BundleImpl\n" or SPLDie(1, SPL::Msg::CANNOT_OPEN_FILE_FOR_WRITING($relServicesFile));
close SERVICESFILE;

# Build the manifest
my $mainClass = 'com.ibm.streams.spl.compiler.application.bundle.Standalone';

my $relManifestFile = "$relManifestDir/MANIFEST.MF";
my  $manifest = <<END;
StreamsBundleFile: $bundleFileName
BuildId: $buildId
Main-Class: $mainClass
END
open MANIFESTFILE, '>', $relManifestFile or SPLDie(1, SPL::Msg::CANNOT_OPEN_FILE_FOR_WRITING($relManifestFile));
print MANIFESTFILE "$manifest" or SPLDie(1, SPL::Msg::CANNOT_OPEN_FILE_FOR_WRITING($relManifestFile));
close MANIFESTFILE;

chdir($relBundleWorkDir);

# Get the BundleImpl implementation
my $splJarFile = "$streamsInstall/system/impl/lib/com.ibm.streams.spl.compiler.impl.jar";
my $jar = "$ENV{JAVA_HOME}/bin/jar";
my $cmd = "$jar xf ";
$cmd .= escapePath($splJarFile);
$cmd .= " com/ibm/streams/spl/compiler/application/bundle/BundleImpl.class";
$cmd .= " com/ibm/streams/spl/compiler/application/bundle/Standalone.class";
runCommand($cmd, 3);

# Build the final bundle file
$cmd = "$jar cmf META-INF/MANIFEST.MF ";
$cmd .= escapePath($fqBundleFile);
$cmd .= " *";
runCommand($cmd, 4);

my $mode = 0555;

chmod($mode, $fqBundleFile);

# Build the standalone script if necessary
   my $script = <<SCRIPTEND;
#!/bin/bash
if [ -z \"\$STREAMS_INSTALL\" ]; then
   echo \"STREAMS_INSTALL is not set\"
   exit 1
fi
SCRIPT_PATH=\`dirname \$0\`
\$JAVA_HOME/bin/java -jar \$SCRIPT_PATH/sab \"\$@\"
SCRIPTEND
    open SCRIPTFILE, '>', $fqScriptFile or SPLDie(1, SPL::Msg::CANNOT_OPEN_FILE_FOR_WRITING($fqScriptFile));
    print SCRIPTFILE $script or SPLDie(1, SPL::Msg::CANNOT_OPEN_FILE_FOR_WRITING($fqScriptFile));
    close SCRIPTFILE;
    chmod(0555, $fqScriptFile);

END {
    cleanup();
}

exit(0);

sub recursivelyAddDirectory($$)
{
    my ($dir, $files) = @_;

    opendir(DIR, $dir);
    my @paths = readdir(DIR);
    closedir(DIR);
    foreach my $path (@paths) {
        next if ($path eq '.');
        next if ($path eq '..');
        my $fullPath = "$dir/$path";
        if (-d $fullPath) {
            recursivelyAddDirectory($fullPath, $files);
        } elsif (-f $fullPath) {
            push(@$files, $fullPath);
        }
    }
}

sub buildOutputDirFileList($$)
{
    my ($relOutputDir, $adlFileName) = @_;
    my $cwd = getcwd();
    chdir($relOutputDir);
    my %pathsToSkip = ('.', 1, '..', 1, '.sc.outdir', 1, 'toolkits', 1, 'build', 1, 'etc', 1, 'bin', 1, 'usr', 1, $adlFileName, 1, 'src', 1);
    my @files;

    opendir(DIR, '.');
    my @paths = readdir(DIR);
    closedir(DIR);
    foreach my $path (@paths) {
        next if defined($pathsToSkip{$path});
        my $fullPath = "$relOutputDir/$path";
        if (-d $path) {
            recursivelyAddDirectory($path, \@files);
        } elsif (-f $path) {
            push(@files, $path);
        }
        # Skip anything that is not a directory or a regular file
    }

    chdir($cwd);
    return @files;
}

sub isIncluded($$)
{
    my ($file, $regExs) = @_;
    foreach my $regEx (@{$regExs}) {
        return 1 if ($file =~ /$regEx/);
    }

    return 0;
}

sub addToTarFile($$$$)
{
    my ($regExs, $outputFiles, $relOutputDir, $relTarFile) = @_;
    my @addedFiles;
    foreach my $file (@{$outputFiles}) {
        if (isIncluded($file, $regExs)) {
            push(@addedFiles, $file);
            my $tarCmd = "/bin/tar -rf";
               $tarCmd .= " " . escapePath($relTarFile);
               $tarCmd .= " " . escapePath("$relOutputDir/$file");
            runCommand($tarCmd, 5);
        }
    }

    return @addedFiles;
}

sub cleanup()
{
    chdir($fqOutputDirRoot);
    rmtree($relBundleWorkDir, {verbose=>0});
    rmtree($relToolkitsDir, {verbose=>0});
}

sub makePathIfNecessary($)
{
    my ($path) = @_;
    my $err;
    mkpath($path, {verbose=>0, mode=>0755, error=>\$err});
    if (@$err) {
        SPLDie(1, SPL::Msg::BUNDLE_FILE_CREATION_FAILED(5, $!));
    }
}

sub copyToolkits($$)
{
    # We are sitting in the root dir of the output directory
    my ($relToolkitsDir, $xml) = @_;

    my $toolkits = $xml->{'bundleInfoModel'}->[0]->{'toolkit'};
    # For each toolkit...
    foreach my $toolkit (@{$toolkits}) {
        my $sourceDir = $toolkit->{'compileRoot'};
        utf8::encode($sourceDir);
        my $toolkitName = $toolkit->{'name'};
        utf8::encode($toolkitName);
        # Create the toolkit directory
        my $toolkitSrcDir = "$sourceDir/$toolkitName";
        my $relToolkitDstDir = "$relToolkitsDir/$toolkitName";
        makePathIfNecessary($relToolkitDstDir);
        my $files = $toolkit->{'file'};
        # copy over the files
        foreach my $file (@{$files}) {
            my $filename = $file->{'name'};
            utf8::encode($filename);
            my $subdir = dirname($filename);
            my $srcFilename = "$sourceDir/$filename";
            $srcFilename = escapePath($srcFilename);
            my $tgtFilename = "$relToolkitDstDir/$filename";
            makePathIfNecessary(dirname($tgtFilename));
            # Escape the path after making the directory or you will get double escaping
            $tgtFilename = escapePath($tgtFilename);
            my $copyCmd = "/bin/cp $srcFilename $tgtFilename";
            runCommand($copyCmd, 6);
        }
    }
}

sub runCommand($$)
{
    my ($cmd, $errorCode) = @_;
#    my $rc = system("$cmd 2>/dev/null");
    my $rc = system("$cmd");
    $rc = $rc >> 8;
    if ($rc) {
print STDERR "FaIled command: $cmd\n";
        SPLDie(1, SPL::Msg::BUNDLE_FILE_CREATION_FAILED($errorCode, $rc));
        exit($errorCode);
    }
}

sub escapePath($)
{
    my ($path) = @_;
    $path =~ s/\$/\\\$/cg;
    $path =~ s/\(/\\\(/cg;
    $path =~ s/\)/\\\)/cg;
    $path =~ s/\</\\\</cg;
    $path =~ s/\>/\\\>/cg;
    $path =~ s/&/\\&/cg;
    $path =~ s/ /\\ /cg;
    return $path;
}
