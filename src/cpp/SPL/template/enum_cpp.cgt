/*
 * Copyright 2021 IBM Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

<%my $class = $model->getClass();%>
#include "<%=$class%>.h"

#define SELF <%=$class%>

using namespace SPL;

EnumMappings* SELF::mappings_ = SELF::initMappings();

<%my $i = 0; foreach (@{$model->getEnumerators()}) {%>
SELF SELF::<%=$_->getName()%>(<%=$i++%>);<%}%>

SELF::SELF(const std::string & v)
: Enum(*mappings_)
{
    // initialize from a string value
    this->Enum::operator=(v);
}

SELF::SELF(const rstring & v)
: Enum(*mappings_)
{
    // initialize from a string value
    this->Enum::operator=(v);
}


EnumMappings* SELF::initMappings()
{
   EnumMappings* em = new EnumMappings();
   // initialize the mappings <%for (my $i = 0; $i < $model->getNumberOfEnumerators(); ++$i) { my $enum = $model->getEnumeratorAt($i);%>
   {
      std::string s("<%=$enum->getName()%>");
      em->nameToIndex_.insert(std::make_pair(s, <%=$i%>));
      em->indexToName_.push_back(s);
   }
   <%} %>
   return em;
}
