/*
 * Copyright 2021 IBM Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

<%
    use CompressCommon;
    CompressCommon::verify($model);

    my @includes;
    push @includes, "#include <fstream>";
    push @includes, "#include <boost/iostreams/stream.hpp>";
    push @includes, "#include <boost/iostreams/filtering_streambuf.hpp>";
    #checkpoint and consistent region support
    my $ckptKind = $model->getContext()->getCheckpointingKind();
    my $isInConsistentRegion = $model->getContext()->getOptionalContext("ConsistentRegion");
    if ($isInConsistentRegion) {
       push @includes, "#include <SPL/Runtime/Operator/State/ConsistentRegionContext.h>";
       push @includes, "#include <SPL/Runtime/Operator/State/StateHandler.h>";
    }

    SPL::CodeGen::headerPrologue($model, \@includes);%>

class MY_OPERATOR : public MY_BASE_OPERATOR<%if ($isInConsistentRegion or $ckptKind ne "none") {%>, public StateHandler<%}%>
{
  public:
    MY_OPERATOR();

    void process(Tuple const & tuple, uint32_t port);
    void process(Punctuation const & punct, uint32_t port);

    <%if ($isInConsistentRegion) {%>
        // Consistent region support
        virtual void drain();
        virtual void reset(Checkpoint & ckpt);
        virtual void resetToInitialState();
        void resetCommon();
    <%}%>
  private:
    std::auto_ptr<boost::iostreams::filtering_streambuf<boost::iostreams::output> > _filt_str;
    std::auto_ptr<std::ostream> _fs;
    SPL::Mutex _mutex;
    <%if ($isInConsistentRegion) {%>
       ConsistentRegionContext *_crContext;
    <%}%>
};

<%SPL::CodeGen::headerEpilogue($model);%>
