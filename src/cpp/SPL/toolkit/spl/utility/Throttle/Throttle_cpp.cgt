/*
 * Copyright 2021 IBM Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

<%
    use ThrottleCommon;
    ThrottleCommon::verify($model);

    my $rate = $model->getParameterByName("rate");
    my $period = $model->getParameterByName("period");
    my $includePunctuations = $model->getParameterByName("includePunctuations");
    my $precise = $model->getParameterByName("precise");

    $rate = $rate->getValueAt(0)->getCppExpression();

    if ($period) {
        $period = $period->getValueAt(0)->getCppExpression();
    } else {
        $period = "10.0 * (1.0 / (_rate))";
    }

    if ($precise) {
        $precise = $precise->getValueAt(0)->getCppExpression() eq "true";
    } else {
        $precise = 0;
    }

    if ($includePunctuations) {
        $includePunctuations = $includePunctuations->getValueAt(0)->getSPLExpression();
    } else {
        $includePunctuations = "false";
    }
%>

<%if ($precise) {%>
#include <SPL/Toolkit/Delay.h>
<%}%>

<%SPL::CodeGen::implementationPrologue($model);%>

#define NANOS_IN_SEC 1000000000LL

MY_OPERATOR::MY_OPERATOR()
: MY_BASE_OPERATOR()
{
    _last.time = 0;     // ensure first tuple processed correctly
    _rate = <%=$rate%>;
    double p = <%=$period%>;
    _period = static_cast<uint64_t>(p * NANOS_IN_SEC);
    _periodDiv2 = _period / 2;
    _halfFull = static_cast<uint64_t>(_rate * (p / 2)); // assume half full
    _initTime = 0;
}

template<class T> void MY_OPERATOR::handleOne(T& o)
{
    AutoPortMutex apm(_mutex, *this);
    uint64 currentTime = SPL::Functions::Time::getCPUCounterInNanoSeconds() - _initTime;

    if (_last.time == 0) {
        _last.time = _periodDiv2;
        _last.count = _currentCount = _halfFull;
        _first.time = _first.count = 0;
        _initTime = currentTime - _periodDiv2;
        submit(o, 0);
        return;
    }

    uint64 newLastTime = _periodDiv2*(currentTime/_periodDiv2);
    uint64 newFirstTime = newLastTime - _periodDiv2;

    if (newFirstTime != _first.time) {
        _first.time = newFirstTime;
        _last.time = newLastTime;
        _first.count = _last.count;
        _last.count = _currentCount;
    }

    double timeInterval = (currentTime-_first.time)/static_cast<double>(NANOS_IN_SEC);
    double countInterval = 1+_currentCount-_first.count;
    double projectedRate = countInterval/timeInterval;

    _currentCount++;
    if (projectedRate < _rate) {
        submit(o, 0);
        return;
    }

    double sleepTime = countInterval/_rate - timeInterval;
    <%if ($precise) {%>
        SPL::preciseBlockUntilShutdownRequest(sleepTime, getPE());
    <%} else {%>
        getPE().blockUntilShutdownRequest(sleepTime);
    <%}%>
    submit(o, 0);
}

void MY_OPERATOR::process(Tuple const & tuple, uint32_t port)
{
    handleOne (tuple);
}

void MY_OPERATOR::process(Punctuation const & punct, uint32_t port)
{
    if (punct == Punctuation::FinalMarker)
        return;
<%if ($includePunctuations eq "true") {%>
    handleOne (punct);
<%} else {%>
    submit (punct, port);
<%}%>
}

void MY_OPERATOR::processWatermark(Punctuation const & wm, uint32_t port)
{
<%if ($includePunctuations eq "true") {%>
    handleOne (wm);
<%} else {%>
    submit (wm, port);
<%}%>
}

<%SPL::CodeGen::implementationEpilogue($model);%>
