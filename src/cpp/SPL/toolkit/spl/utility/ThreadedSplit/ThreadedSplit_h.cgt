/*
 * Copyright 2021 IBM Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

<%
    use ThreadedSplitCommon;
    my $numOutputPorts = $model->getNumberOfOutputPorts();
    my $ckptKind = $model->getContext()->getCheckpointingKind();
    my $isInConsistentRegion = $model->getContext()->getOptionalContext("ConsistentRegion");
    my @includes;
    push @includes, "#include <SPL/Runtime/Operator/EventTime/WatermarkHandler.h>";
    if ($isInConsistentRegion) {
        push @includes, "#include <SPL/Runtime/Operator/State/StateHandler.h>";
        push @includes, "#include <SPL/Runtime/Operator/State/ConsistentRegionContext.h>";
    }
    ThreadedSplitCommon::verify($model);
%>

#include <SPL/Runtime/Operator/Port/Punctuation.h>
#include <SPL/Toolkit/CircularQueue.h>
#include <vector>

<%SPL::CodeGen::headerPrologue($model, \@includes);%>

class MY_OPERATOR : public MY_BASE_OPERATOR<%if ($isInConsistentRegion or $ckptKind ne "none") {%>, public StateHandler<%}%>, public WatermarkHandler
{
public:
    MY_OPERATOR();
    ~MY_OPERATOR();

    virtual void process(uint32_t index);
    virtual void process(Tuple const & tuple, uint32_t port);
    virtual void process(Punctuation const & punct, uint32_t port);
    virtual void processWatermark(Punctuation const & wm, uint32_t port);
    virtual void allPortsReady();
    virtual void prepareToShutdown();

    <% if ($isInConsistentRegion) { %>
        virtual void drain();
    <% }
       if ($isInConsistentRegion or $ckptKind ne "none") { %>
        virtual void reset(Checkpoint & ckpt);
        virtual void resetToInitialState();
    <% } %>

private:
    volatile bool done_;
    uint32_t currentBuf_;
    uint32_t bufferSize_;
    uint32_t numOutputPorts_;
    struct ItemType
    {
        Tuple * tuple;
        Punctuation punct;
        ItemType()
          { tuple = NULL; punct = Punctuation::Invalid;}
        ItemType(Tuple *t)
          { tuple = t; punct = Punctuation::Invalid;}
        ItemType(Punctuation p)
          { tuple = NULL; punct = p;}
        bool isTuple() const
          { return !isPunct(); }
        bool isPunct() const
          { return punct != Punctuation::Invalid; }
    };
    std::vector<CircularQueue<ItemType> *> buffers_;
    Mutex mutex_; // in case we are called by multiple threads

    // for graceful waiting - these are NOT used to prevent multiple
    // threads from changing queues at the same time; that's what
    // the above mutex_ is for
    std::vector<CV*> consumeCVs_;
    std::vector<Mutex*> consumeMutexes_;

    struct OutputPortMetrics
    {
        Metric * nItemsQueuedMetric;
        Metric * maxItemsQueuedMetric;
        Metric * recentMaxItemsQueuedMetric;
        uint32_t currentMaxItemsQueued;
        uint32_t previousMaxItemsQueued;
    };
    OutputPortMetrics outputPortMetrics_[<%=$numOutputPorts%>];
    Metric * nEnqueueWaitsMetric_;
    CV metricsIntervalCV_;
    Mutex metricsIntervalMutex_;

    std::string makeMetricNameForPort(uint32_t port, std::string const & name);
    void resetMetrics();
    void process(ItemType const & item);
    void processQueue(uint32_t index);
    void processMetricsIntervalTimer();
    void wakeMetricsIntervalTimer();

    <% if ($isInConsistentRegion) { %>
        ConsistentRegionContext *_crContext;
    <% } %>
};

<%SPL::CodeGen::headerEpilogue($model);%>
