/*
 * Copyright 2021 IBM Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

<%
    use DynamicFilterCommon;
    DynamicFilterCommon::verify($model);
    my $inputPort0 = $model->getInputPortAt(0);
    my $input0TupleName = $inputPort0->getCppTupleName();
    my $inputPort1 = $model->getInputPortAt(1);
    my $input1TupleName = $inputPort1->getCppTupleName();
    my $inputPort2 = $model->getInputPortAt(2);
    my $input2TupleName = ($inputPort2) ?
        $inputPort2->getCppTupleName() : undef;
    my $keyParam = $model->getParameterByName("key");
    my $keyIniter = SPL::CodeGen::getParameterCppInitializer ($keyParam);
    my $addKeyParam = $model->getParameterByName("addKey");
    my $addKeyIniter = SPL::CodeGen::getParameterCppInitializer ($addKeyParam);
    my $removeKeyParam = $model->getParameterByName("removeKey");
    my $removeKeyIniter = ($removeKeyParam) ?
        SPL::CodeGen::getParameterCppInitializer ($removeKeyParam) : undef;
    my $nonMatchOutput = $model->getNumberOfOutputPorts() == 2;

    my $isInConsistentRegion = $model->getContext()->getOptionalContext("ConsistentRegion");
    my $ckptKind = $model->getContext()->getCheckpointingKind();
%>

<%SPL::CodeGen::implementationPrologue($model);%>
MY_OPERATOR::MY_OPERATOR()
{
}

void MY_OPERATOR::process(Tuple const & tuple, uint32_t port)
{
<%if ($isInConsistentRegion || $ckptKind ne "none") {%>
    AutoMutex am(_mutex);
<% } else {%>
    AutoPortMutex apm(_mutex, *this);
<% } %>

    switch (port) {
    case 0:
        processKey(tuple);
        break;
    case 1:
        processAddKey(tuple);
        break;
    <%if($removeKeyParam) {%>
    case 2:
        processRemoveKey(tuple);
        break;
    <%}%>
    default: assert(!"cannot happen");
    }
}

void MY_OPERATOR::processKey(Tuple const & tuple)
{
    const IPort0Type & <%=$input0TupleName%> = static_cast<const IPort0Type&>(tuple);
    KeyType key(<%=$keyIniter%>);
    if(set_.count(key))
        submit(tuple, 0);
<%if ($nonMatchOutput) {%>
   else
       submit(tuple, 1);
<%}%>

}

void MY_OPERATOR::processAddKey(Tuple const & tuple)
{
    const IPort1Type & <%=$input1TupleName%> = static_cast<const IPort1Type&>(tuple);
    KeyType addKey(<%=$addKeyIniter%>);
    set_.insert(addKey);
}

<%if($removeKeyParam) {%>
    void MY_OPERATOR::processRemoveKey(Tuple const & tuple)
    {
        const IPort2Type & <%=$input2TupleName%> = static_cast<const IPort2Type&>(tuple);
        KeyType removeKey(<%=$removeKeyIniter%>);
        set_.erase(removeKey);
    }
<%}%>

void MY_OPERATOR::process(Punctuation const & punct, uint32_t port)
{
<%if ($isInConsistentRegion || $ckptKind ne "none") {%>
    AutoMutex am(_mutex);
<% } else {%>
    AutoPortMutex apm(_mutex, *this);
<% } %>

    if(port==0 && punct==Punctuation::WindowMarker)
        forwardWindowPunctuation(punct);
}

void MY_OPERATOR::checkpoint(Checkpoint & ckpt)
{
    AutoMutex am(_mutex);

    ckpt << set_;
}

void MY_OPERATOR::reset(Checkpoint & ckpt)
{
    AutoMutex am(_mutex);

    set_.clear();
    ckpt >> set_;
}

void MY_OPERATOR::resetToInitialState()
{
    AutoMutex am(_mutex);

    set_.clear();
}


<%SPL::CodeGen::implementationEpilogue($model);%>
