/*
 * Copyright 2021 IBM Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

<%
    use DynamicFilterCommon;
    DynamicFilterCommon::verify($model);
    my $keyParam = $model->getParameterByName("key");
    my @keyTypes = SPL::CodeGen::getParameterCppTypes($keyParam);
    my $keyType = SPL::CodeGen::emitClass($model, 'KeyType', @keyTypes);
    my $removeKeyParam = $model->getParameterByName("removeKey");
    my $isInConsistentRegion = $model->getContext()->getOptionalContext("ConsistentRegion");
    my @includes;
    push @includes, "#include <SPL/Runtime/Operator/State/StateHandler.h>";
%>

<%SPL::CodeGen::headerPrologue($model, \@includes);%>

class MY_OPERATOR : public MY_BASE_OPERATOR,
    public StateHandler
{
public:
    MY_OPERATOR();
    void process(Tuple const & tuple, uint32_t port);
    void process(Punctuation const & punct, uint32_t port);

    virtual void checkpoint(Checkpoint & ckpt);
    virtual void reset(Checkpoint & ckpt);
    virtual void resetToInitialState();

private:
    void processKey(Tuple const & tuple);
    void processAddKey(Tuple const & tuple);
    <%if($removeKeyParam) {%>
        void processRemoveKey(Tuple const & tuple);
    <%}%>

    Mutex _mutex;

    typedef <%=$keyType%> KeyType;
    typedef std::tr1::unordered_set<KeyType> SetType;
    SetType set_;
};

<%SPL::CodeGen::headerEpilogue($model);%>
