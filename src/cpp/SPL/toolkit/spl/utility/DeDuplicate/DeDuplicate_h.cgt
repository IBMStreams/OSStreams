/*
 * Copyright 2021 IBM Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

<%
    use DeDuplicateCommon;
    DeDuplicateCommon::verify($model);
    my $key = $model->getParameterByName("key");
    my @keyTypes = SPL::CodeGen::getParameterCppTypes($key);
    my $cppType = $model->getInputPortAt(0)->getCppTupleType();
    my $keyType = $key ? SPL::CodeGen::emitClass($model, 'KeyType', @keyTypes) : $cppType;
    my $count = $model->getParameterByName("count");
    my $deltaAttribute = $model->getParameterByName("deltaAttribute");
    my $delta = $model->getParameterByName("delta");
    my $doTime = !($count || $delta);
    my $deltaType = $deltaAttribute ? $deltaAttribute->getValueAt(0)->getCppType() : undef;
    my $valueType = $doTime ? "double" : ($count ? "int64_t" : $deltaType);

    my @includes;
    push @includes, "#include <SPL/Runtime/Operator/State/StateHandler.h>";

    SPL::CodeGen::headerPrologue($model, \@includes);
%>

class MY_OPERATOR : public MY_BASE_OPERATOR,
    public StateHandler
{
public:
    MY_OPERATOR();

    virtual void process(Punctuation const & punct, uint32_t port);
    virtual void process(Tuple const & tuple, uint32_t port);

    virtual void checkpoint(Checkpoint & ckpt);
    virtual void reset(Checkpoint & ckpt);
    virtual void resetToInitialState();

    typedef <%=$keyType%> KeyType;
    struct ListDataType {
        ListDataType(KeyType const & k, <%=$valueType%> value)
            : _key(k), _value(value) {}

        ListDataType() {}

        void checkpoint(Checkpoint & ckpt) {
            ckpt << _key;
            ckpt << _value;
        }

        void reset(Checkpoint & ckpt) {
            ckpt >> _key;
            ckpt >> _value;
        }

        KeyType _key;
        <%=$valueType%> _value;
    };
    typedef std::list<ListDataType> TupleListType;
    typedef TupleListType::iterator ListElementIter;
    typedef std::tr1::unordered_map<KeyType, ListElementIter> TupleMapType;

private:
    void resetCommon();

    Mutex                  _mutex;
    <% if ($doTime) {%>
        double             _diff;        // time for 'uniqueness'
    <%} elsif ($count) {%>
        int64_t            _diff;        // number of tuples until discarded
        int64_t            _nTuples;     // number of tuples seen so far
    <%} else {%>
        <%=$deltaType%>    _diff;        // value difference until discarded
    <%}%>
    TupleMapType           _map;         // The tuples to be checked
    TupleListType          _list;        // The ordered list of tuples

};

<%SPL::CodeGen::headerEpilogue($model);%>
