/*
 * Copyright 2021 IBM Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

<%
   my $consistentRegionContext = $model->getContext()->getOptionalContext("ConsistentRegion");
   my @includes;
   push @includes, "#include <list>";
   push @includes, "#include <map>";
   push @includes, "#include <SPL/Runtime/Operator/Port/Punctuation.h>";
   push @includes, "#include <SPL/Runtime/Utility/Mutex.h>";
   push @includes, "#include <SPL/Runtime/Utility/CV.h>";
   push @includes, "#include <SPL/Runtime/Operator/EventTime/WatermarkHandler.h>";
   if ($consistentRegionContext) {
       if ($consistentRegionContext->isStartOfRegion()) {
           SPL::CodeGen::exitln (SPL::Msg::OP_CANNOT_START_CR($model->getContext()->getKind), $model->getContext()->getSourceLocation());
       }
       push @includes, "#include <SPL/Runtime/Operator/State/ConsistentRegionContext.h>";
       push @includes, "#include <SPL/Runtime/Operator/State/StateHandler.h>";
   }

   SPL::CodeGen::headerPrologue($model,\@includes);

   my $outputPort = $model->getOutputPortAt(0);
   my $otupleType = $outputPort->getCppTupleType();
   my $inputPort = $model->getInputPortAt(0);
   my $itupleType = $inputPort->getCppTupleType();
%>


class MY_OPERATOR : public MY_BASE_OPERATOR
  <%print ", public StateHandler" if $consistentRegionContext;%>
  , public WatermarkHandler
{
public:

  MY_OPERATOR();

  // Tuple processing for non-mutating ports
  void process(Tuple const & tuple, uint32_t port);

  // Punctuation processing
  void process(Punctuation const & punct, uint32_t port);

  // Watermark handling
  void processWatermark(Punctuation const & wm, uint32 port);

<%if ($consistentRegionContext) {%>
    virtual void reset(Checkpoint & id);
    virtual void resetToInitialState();

    void deselect();
<%}%>

private:
  // Members
  boolean _selected;
  uint32_t _portIndex;
  Mutex _portMutex;
};

<%SPL::CodeGen::headerEpilogue($model);%>
