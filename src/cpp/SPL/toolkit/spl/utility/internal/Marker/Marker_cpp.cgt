/*
 * Copyright 2021 IBM Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

<%
   my $crContext = $model->getContext()->getOptionalContext("ConsistentRegion");
   my $isTriggerOperator = 0;
   $isTriggerOperator = $crContext->isTriggerOperator() if $crContext;
%>

<%SPL::CodeGen::implementationPrologue($model);%>

MY_OPERATOR::MY_OPERATOR()
<%if ($isTriggerOperator) {%>
    : _caContext(0)
<%}%>
{
  <%if ($isTriggerOperator) {%>
      _caContext = static_cast<ConsistentRegionContext *>
          (getContext().getOptionalContext(CONSISTENT_REGION));
  <%}%>
}

MY_OPERATOR::~MY_OPERATOR()
{
}


// Tuple processing for non-mutating ports
void MY_OPERATOR::process(Tuple const & tuple, uint32_t port)
{
      submit (tuple, 0);
}

// Punctuation processing
void MY_OPERATOR::process(Punctuation const & punct, uint32_t port)
{

    // If this operator is the consistent region start operator,
    // trigger a drain after each window or final marker.
    if (punct == Punctuation::WindowMarker || punct == Punctuation::FinalMarker) {
        // First, forward the punctuation
        submit (punct, 0);

<%if ($isTriggerOperator) {%>
        _caContext->makeConsistent();
<%}%>
    }
}

<%SPL::CodeGen::implementationEpilogue($model);%>
