/*
 * Copyright 2021 IBM Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

<%
    my @includes;
    push @includes, "#include <SPL/Runtime/Operator/Port/Punctuation.h>";
    push @includes, "#include <SPL/Runtime/Utility/Mutex.h>";
    push @includes, "#include <SPL/Runtime/Utility/CV.h>";
    my $crContext = $model->getContext()->getOptionalContext("ConsistentRegion");
    my $isTriggerOperator = 0;
    $isTriggerOperator = $crContext->isTriggerOperator() if $crContext;
    if ($crContext) {
       push @includes, "#include <SPL/Runtime/Operator/State/ConsistentRegionContext.h>";
    }
%>

<%SPL::CodeGen::headerPrologue($model,\@includes);%>

class MY_OPERATOR : public MY_BASE_OPERATOR
{
public:
  MY_OPERATOR();

  virtual ~MY_OPERATOR();

  // Tuple processing for non-mutating ports
  void process(Tuple const & tuple, uint32_t port);

  // Punctuation processing
  void process(Punctuation const & punct, uint32_t port);

private:
   <%if ($isTriggerOperator) {%>
       ConsistentRegionContext *_caContext;
   <%}%>
};

<%SPL::CodeGen::headerEpilogue($model);%>
