/*
 * Copyright 2021 IBM Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

<%
   my $consistentRegionContext = $model->getContext()->getOptionalContext("ConsistentRegion");
   my @includes;
   push @includes, "#include <list>";
   push @includes, "#include <map>";
   push @includes, "#include <SPL/Runtime/Operator/Port/Punctuation.h>";
   push @includes, "#include <SPL/Runtime/Utility/Mutex.h>";
   push @includes, "#include <SPL/Runtime/Utility/CV.h>";
   push @includes, "#include <SPL/Runtime/Operator/EventTime/WatermarkHandler.h>";
   if ($consistentRegionContext) {
       push @includes, "#include <SPL/Runtime/Operator/State/ConsistentRegionContext.h>";
       push @includes, "#include <SPL/Runtime/Operator/State/StateHandler.h>";
   }
   else {
       SPL::CodeGen::warnln(SPL::Msg::STDTK_BUFFER_NOT_IN_CR(), $model->getContext()->getSourceLocation());
   }

   SPL::CodeGen::headerPrologue($model,\@includes);

   my $outputPort = $model->getOutputPortAt(0);
   my $otupleType = $outputPort->getCppTupleType();
   my $inputPort = $model->getInputPortAt(0);
   my $itupleType = $inputPort->getCppTupleType();
%>

class MY_OPERATOR : public MY_BASE_OPERATOR
  <%print ", public StateHandler" if $consistentRegionContext;%>
  , public WatermarkHandler
{
public:
    MY_OPERATOR();

    void allPortsReady();

    void prepareToShutdown();

    // worker thread
    void process(uint32_t idx);

    // main tuple processing
    void process(Tuple const & tuple, uint32_t port);

    // punctuation processing
    void process(Punctuation const & punct, uint32_t port);

    // watermark processing
    void processWatermark(Punctuation const & wm, uint32_t port);

<%if ($consistentRegionContext) {%>
    virtual void drain();
    virtual void checkpoint(Checkpoint & ckpt);
    virtual void reset(Checkpoint & ckpt);
    virtual void retireCheckpoint(int64_t id);
    virtual void resetToInitialState();

    void clearQueue();
    void enqueueSequence(int64_t sequenceId);
    void enqueueStartingFrom(int64_t startSequenceId);
<%}%>

private:
    class OutputQueueItem;

    typedef <%=$itupleType%> ITupleType;
    typedef <%=$otupleType%> OTupleType;
    typedef std::list<OutputQueueItem> TupleList;
    typedef TupleList::iterator TupleListIterator;
    typedef std::map<int64_t, TupleList> TupleMap;
    typedef std::list<OutputQueueItem> OutQueue;


    Mutex _outQueueMutex;
    CV    _outQueueCV;

    TupleMap _tupleMap;
    OutQueue _outQueue;

    enum {WAITING, COLLECTING} _state;
    int64_t _currentSequenceId;

<%if ($consistentRegionContext) {%>
    ConsistentRegionContext* _crContext;
<%}%>

  class OutputQueueItem {
  private:

    OTupleType _oTuple;
    Punctuation _punctuation;

  public:
    OutputQueueItem (const Punctuation& p) : _oTuple(), _punctuation(p) {}
    OutputQueueItem (const Tuple& iTuple) : _oTuple (iTuple), _punctuation(Punctuation::Invalid) {}

    bool isTuple() const { return ! isPunct(); }
    bool isPunct() const { return _punctuation != Punctuation::Invalid; }
    void submit (SPL::Operator* submitter, uint32_t port) {
      if (isTuple()) {
        submitter->submit (_oTuple, port);
      }
      else {
        submitter->submit (_punctuation, port);
      }
    }
  };
};

<%SPL::CodeGen::headerEpilogue($model);%>
