/*
 * Copyright 2021 IBM Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

<%
    my $inputPort = $model->getInputPortAt(0);
    my $outputPort = $model->getOutputPortAt(0);
    my $inTupleName = $inputPort->getCppTupleName();
    my $outTupleType = $outputPort->getCppTupleType();
    my $bufferDelay = $model->getParameterByName("BufferDelay")->getValueAt(0)->getCppExpression();
    my $delayType = $model->getParameterByName("DelayType")->getValueAt(0)->getSPLExpression();
    my $replacementKey = $model->getParameterByName("ReplacementKey");
    my $keyInitializer = SPL::CodeGen::getParameterCppInitializer($replacementKey);
%>
<%SPL::CodeGen::implementationPrologue($model);%>

MY_OPERATOR::MY_OPERATOR()
: MY_BASE_OPERATOR(),
<%if ($delayType ne "Time") {%>
    _clock (0),
<%}%>
_delay (<%=$bufferDelay%>)
{
}

MY_OPERATOR::~MY_OPERATOR()
{
    for (MapType::iterator it = _map.begin(); it != _map.end(); it++)
        delete it->second;
}

void MY_OPERATOR::process(Tuple const & tuple, uint32_t port)
{
    IPort0Type const & <%=$inTupleName%> = static_cast<IPort0Type const&>(tuple);

    KeyType key (<%=$keyInitializer%>);

    AutoPortMutex (_mutex, *this);
<%if ($delayType eq "Time") {%>
    TimeType time = SPL::Functions::Time::getTimestampInSecs();
<%} else {%>
    TimeType time = ++_clock;
<%}%>

    MapType::iterator it = _map.find (key);
    if (it == _map.end()) {
        _map.insert (std::make_pair (key, new IPort0Type(<%=$inTupleName%>)));
        _delayQueue.push_back (std::make_pair(time, key));
    } else {
        *it->second = <%=$inTupleName%>;
    }

    while (!_delayQueue.empty()) {
        DelayQueue::iterator it = _delayQueue.begin();
        TimeType otime = it->first;

        if (time - otime < _delay)
            break;
        MapType::iterator it2 = _map.find (it->second);
        assert (it2 != _map.end());
        IPort0Type const & <%=$inTupleName%> = *it2->second;
        <%SPL::CodeGen::emitSubmitOutputTuple($outputPort, $inputPort);%>
        delete it2->second;
        _map.erase(it2);
        _delayQueue.pop_front();
    }
}

<%SPL::CodeGen::implementationEpilogue($model);%>
