/*
 * Copyright 2021 IBM Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

<%
    use KeyedDelayCommon;
    KeyedDelayCommon::verify($model);
    my $bufferDelay = $model->getParameterByName("BufferDelay")->getValueAt(0)->getCppExpression();
    my $delayType = $model->getParameterByName("DelayType")->getValueAt(0)->getSPLExpression();
    my $replacementKey = $model->getParameterByName("ReplacementKey");
    my @keys = SPL::CodeGen::getParameterCppTypes($replacementKey);
    my $keyCppType = SPL::CodeGen::emitClass($model, 'KeyType', @keys);
    my @includes;
    push @includes, "#include <deque>";

SPL::CodeGen::headerPrologue($model, \@includes);%>

class MY_OPERATOR : public MY_BASE_OPERATOR
{
public:
    MY_OPERATOR();
    ~MY_OPERATOR();

    void process(Tuple const & tuple, uint32_t port);
private:
    Mutex               _mutex;
<%if ($delayType eq "Time") {%>
    typedef double      TimeType;
<%} else {%>
    typedef uint64_t    TimeType;
    TimeType            _clock;
<%}%>
    TimeType            _delay;
    typedef <%=$keyCppType%> KeyType;

    typedef std::tr1::unordered_map<KeyType, IPort0Type*> MapType;
    typedef std::deque<std::pair<TimeType, KeyType> > DelayQueue;
    MapType             _map;
    DelayQueue          _delayQueue;
};

<%SPL::CodeGen::headerEpilogue($model);%>
