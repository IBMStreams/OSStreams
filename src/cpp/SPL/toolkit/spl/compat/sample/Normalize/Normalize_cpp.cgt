/*
 * Copyright 2021 IBM Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

<%
    my $inputPort = $model->getInputPortAt(0);
    my $outputPort = $model->getOutputPortAt(0);
    my $inTupleName = $inputPort->getCppTupleName();
    my $outTupleType = $outputPort->getCppTupleType();
%>
<%SPL::CodeGen::implementationPrologue($model);%>

void MY_OPERATOR::process(Tuple const & tuple, uint32_t port)
{
    IPort0Type const & <%=$inTupleName%> = static_cast<IPort0Type const&>(tuple);

    // Find the largest list in the input
    size_t nTuples = 1;
    size_t u;
    <%for (my $i = 0; $i < $outputPort->getNumberOfAttributes(); $i++) {
        my $attr = $outputPort->getAttributeAt($i);
        my $attrName = $attr->getName();
        if ($attr->hasAssignmentWithOutputFunction() &&
                $attr->getAssignmentOutputFunctionName() eq "Normalized") {
            my $parmValues = $attr->getAssignmentOutputFunctionParameterValues(); %>
            u = <%=$parmValues->[0]->getCppExpression()%>.size();
            nTuples = std::max (nTuples, u);
        <%}
    }%>

    // Create the output tuple(s) -- use set to handle default values
    for (uint32_t i = 0; i < nTuples; i++) {
        <%=$outTupleType%> otuple;
        <%for (my $i = 0; $i < $outputPort->getNumberOfAttributes(); $i++) {
            my $attr = $outputPort->getAttributeAt($i);
            my $attrName = $attr->getName();
            if ($attr->hasAssignmentWithOutputFunction() &&
                    $attr->getAssignmentOutputFunctionName() eq "Normalized") {
                my $parmValues = $attr->getAssignmentOutputFunctionParameterValues();
                my $inputAttrAccessExpr = $parmValues->[0]->getCppExpression(); %>
                if (i < <%=$inputAttrAccessExpr%>.size())
                    otuple.set_<%=$attrName%>(<%=$inputAttrAccessExpr%>[i]);
            <%} elsif ($attr->getAssignmentValue()){
                my $assign = $attr->getAssignmentValue()->getCppExpression();%>
                otuple.set_<%=$attrName%>(<%=$assign%>);
            <%}
        }%>
        submit (otuple, 0);
    }

    // Normalized that batch
    submit(Punctuation::WindowMarker, 0);
}

<%SPL::CodeGen::implementationEpilogue($model);%>
