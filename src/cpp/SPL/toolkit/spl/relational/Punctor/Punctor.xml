<?xml version="1.0" ?>
<operatorModel
  xmlns="http://www.ibm.com/xmlns/prod/streams/spl/operator"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.ibm.com/xmlns/prod/streams/spl/operator operatorModel.xsd">
  <cppOperatorModel>
    <context>
      <description docHref="doc/${nl}/spldoc/html/tk$spl/op$spl.relational$Punctor.html">
The `Punctor` operator is used to transform input tuples into output ones and add window punctuation to the output.

# Checkpointed data

When the `Punctor` operator is checkpointed, logic state variables (if present) are saved in checkpoint.

# Behavior in a consistent region

The `Punctor` operator can be an operator within the reachability graph of a consistent region.
It cannot be the start of a consistent region.
In a consistent region, a `Punctor` operator stores its state when a checkpoint is taken.
When the region is reset, the operator restores the state from the checkpoint.

# Checkpointing behavior in an autonomous region

When the `Punctor` operator is in an autonomous region and configured with `config checkpoint : periodic(T)` clause, a background thread in SPL Runtime checkpoints the operator every T seconds, and such periodic checkpointing activity is asynchronous to tuple processing.
Upon restart, the operator restores its state from the last checkpoint.

When the `Punctor` operator is in an autonomous region and configured with `config checkpoint : operatorDriven` clause, no checkpoint is taken at runtime.
Upon restart, the operator restores to its initial state.

Such checkpointing behavior is subject to change in the future.

# Windowing

The `Punctor` operator does not accept any window configurations.

# Assignments

The `Punctor` operator allows assignments to output attributes.
The output tuple attributes whose assignments are not specified are automatically forwarded from the input ones.
After the automatic forwarding, the `Punctor` operator expects all output tuple attributes to be completely assigned.

# Examples

This example uses the `Punctor` operator.

        composite Main {
          graph
            stream&lt;rstring name, uint32 age, uint64 salary&gt; Beat = Beacon() {}
            stream&lt;rstring name, uint32 age, rstring login,
               tuple&lt;boolean young, boolean rich&gt; info&gt;
             Annotated = Punctor(Beat)
        {
          param punctuate : age &gt;= 18u;
                position : after; // add a punctuation after the generated tuple,
                                 // if the age is &gt;= 18
          output Annotated : login = lower(name),
                             info  = { young = (age&lt;=30u), rich = (salary&gt;1000000ul) };
        }
    }

</description>
      <iconUri size="16">punctor_16.gif</iconUri>
      <iconUri size="32">punctor_32.gif</iconUri>
      <customLiterals>
        <enumeration>
          <name>PunctuationPosition</name>
          <value>before</value>
          <value>after</value>
        </enumeration>
      </customLiterals>
      <providesSingleThreadedContext>Always</providesSingleThreadedContext>
      <codeTemplates>
        <codeTemplate name="Punctor">
          <description>Basic Punctor template</description>
          <template>stream&lt;${schema}&gt; ${streamName} = Punctor(${inputStream}) {
            param
                punctuate : ${booleanExpression};
                position: ${beforeOrAfter};
        }</template>
        </codeTemplate>
      </codeTemplates>
    </context>
    <parameters>
      <allowAny>false</allowAny>
      <parameter>
        <name>punctuate</name>
        <description>
Specifies the condition that determines when a window punctuation is to be generated.
</description>
        <optional>false</optional>
        <rewriteAllowed>true</rewriteAllowed>
        <expressionMode>Expression</expressionMode>
        <type>boolean</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>position</name>
        <description>
Specifies the position of the generated window punctuation with respect to the current tuple.
The valid values are `before` and `after`.
If the value is `before`, the punctuation is generated before the output tuple; otherwise it is generated after the output tuple.
</description>
        <optional>false</optional>
        <rewriteAllowed>false</rewriteAllowed>
        <expressionMode>CustomLiteral</expressionMode>
        <type>PunctuationPosition</type>
        <cardinality>1</cardinality>
      </parameter>
    </parameters>
    <inputPorts>
      <inputPortSet>
        <description>
The `Punctor` operator is configurable with a single input port, which ingests tuples to be punctuated.</description>
        <tupleMutationAllowed>false</tupleMutationAllowed>
        <windowingMode>NonWindowed</windowingMode>
        <windowPunctuationInputMode>Oblivious</windowPunctuationInputMode>
        <cardinality>1</cardinality>
        <optional>false</optional>
      </inputPortSet>
    </inputPorts>
    <outputPorts>
      <outputPortSet>
        <description>
The `Punctor` operator is configurable with a single output port, which produces tuples with generated punctuation.</description>
        <expressionMode>Expression</expressionMode>
        <autoAssignment>true</autoAssignment>
        <completeAssignment>true</completeAssignment>
        <rewriteAllowed>true</rewriteAllowed>
        <windowPunctuationOutputMode>Generating</windowPunctuationOutputMode>
        <tupleMutationAllowed>true</tupleMutationAllowed>
        <cardinality>1</cardinality>
        <optional>false</optional>
      </outputPortSet>
    </outputPorts>
  </cppOperatorModel>
</operatorModel>
