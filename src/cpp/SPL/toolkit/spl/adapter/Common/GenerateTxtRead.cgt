/*
 * Copyright 2021 IBM Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

                <%if ($parsing ne "fast" || $hasAssignments) {%>
                    char ch;
                <%}
                if ($parsing ne "fast") {%>
                    fs >> SPL::skipSpaceTabs >> ch;
                    if (ch != '{') {
                        DO_ERROR((SPL_APPLICATION_RUNTIME_FAILED_READ_CHAR("{", SPL::printableCharacter(ch), _tupleNumber, "before reading any attributes")));
                    }
                    fs.putback(ch);
                <%}
                if ($parsing ne "fast" || $hasAssignments) {
                    # we only handle the ones that don't have assignments here%>
                    fs >> SPL::skipSpaceTabs >> ch;
                    std::string attrName;
                    <%for (my $i = 0; $i < $numAttrs; ++$i) {
                        my $attr = $genAttrs[$i];
                        my $attrName = $attr->getName();%>
                        if (readAttributeIdentifier (fs, attrName)) {
                            <%if ($parsing ne "fast") {%>
                                if (attrName != "<%=$attrName%>") {
                                    DO_ERROR((SPL_APPLICATION_RUNTIME_FAILED_READ_ATTR("<%=$attrName%>", _tupleNumber)));
                                }
                            <%}%>
                            fs >> ch;
                            <%if ($parsing ne "fast") {%>
                                if (ch != '=') {
                                    DO_ERROR((SPL_APPLICATION_RUNTIME_FAILED_READ_CHAR("=", SPL::printableCharacter(ch), _tupleNumber, "during reading the attribute <%=$attrName%>")));
                                }
                            <%}%>
                        }
                        SPL::deserializeWithNanAndInfs (fs, tuple$.get_<%=$attrName%>());
                        <%if ($i != $numAttrs-1) {%>
                            fs >> SPL::skipSpaceTabs >> ch;
                            <%if ($parsing ne "fast") {%>
                                if (ch != ',') {
                                    DO_ERROR((SPL_APPLICATION_RUNTIME_FAILED_READ_CHAR(",", SPL::printableCharacter(ch), _tupleNumber, "after reading the attribute <%=$attrName%>")));
                                }
                            <%}%>
                        <%}%>
                    <%}%>
                    fs >> SPL::skipSpaceTabs >> ch;
                    <%if ($parsing ne "fast") {%>
                        if (ch != '}') {
                            <% my $lastAttr = $genAttrs[$numAttrs-1];
                               my $lastAttrName = $lastAttr->getName(); %>
                            DO_ERROR((SPL_APPLICATION_RUNTIME_FAILED_READ_CHAR("}", SPL::printableCharacter(ch), _tupleNumber, "after reading the attribute <%=$lastAttrName%>")));
                        }
                    <%}%>
                <%} else {%>
                    SPL::deserializeWithNanAndInfs (fs, tuple$);
                <%}%>
                CHECK_ERROR (SPL_APPLICATION_RUNTIME_FAILED_READ_TUPLE("<%=$type%>", _tupleNumber));
                CHECK_FAIL;
