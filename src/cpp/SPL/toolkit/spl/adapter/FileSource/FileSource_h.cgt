/*
 * Copyright 2021 IBM Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

<%
    use FileSourceCommon;
    FileSourceCommon::verify($model);
    my $defaultTuple = $model->getParameterByName("defaultTuple");
    my $defaultTupleType = ($defaultTuple) ? $defaultTuple->getValueAt(0)->getCppType() : "";
    my $hasHeaderLine = $model->getParameterByName("hasHeaderLine");
    my @includes;
    push @includes, "#include <boost/iostreams/stream.hpp>";
    push @includes, "#include <boost/iostreams/filtering_streambuf.hpp>";
    push @includes, "#include <boost/iostreams/device/file_descriptor.hpp>";
    my $hotFile = $model->getParameterByName("hotFile");
    my $file = $model->getParameterByName("file");
    my $format = $model->getParameterByName("format");
    $format = $format ? $format->getValueAt(0)->getSPLExpression() : "csv";;
    my $binary = $format eq "bin" || $format eq "block";
    my $moveFileToDirectory = $model->getParameterByName("moveFileToDirectory");
    my $encoding = $model->getParameterByName("encoding");
    my $ignoreOpenErrors = $model->getParameterByName("ignoreOpenErrors");
    if ($hotFile) {
        $hotFile = $hotFile->getValueAt(0)->getSPLExpression() eq "true";
        push @includes, "#include <SPL/Runtime/Operator/Operator.h>" if $hotFile;
        push @includes, "#include <SPL/Runtime/Operator/Port/Punctuation.h>" if $hotFile;
        push @includes, "#include <SPL/Toolkit/HotFile.h>" if $hotFile;
    } else {
        $hotFile = 0;
    }
    my $readPunctuations = $model->getParameterByName("readPunctuations");
    $readPunctuations = $readPunctuations ? $readPunctuations->getValueAt(0)->getSPLExpression() eq "true" : 0;
    push @includes, "#include <SPL/Runtime/Common/Metric.h>";
    push @includes, "#include <boost/filesystem/path.hpp>";
    push @includes, "#include <SPL/Toolkit/Utility.h>" if $moveFileToDirectory;

    #consistent region support
    my $isInConsistentRegion = $model->getContext()->getOptionalContext("ConsistentRegion");
    if ($isInConsistentRegion) {
        push @includes, "#include <SPL/Runtime/Operator/State/ConsistentRegionContext.h>";
    }
    my $ckptKind = $model->getContext()->getCheckpointingKind();
    push @includes, "#include <SPL/Runtime/Operator/State/StateHandler.h>";
%>
<%SPL::CodeGen::headerPrologue($model, \@includes);%>

class MY_OPERATOR : public MY_BASE_OPERATOR<%if ($isInConsistentRegion or $ckptKind ne "none") {%>, public StateHandler<%}%>
{
public:
    MY_OPERATOR();

    <%if ($file) {%>
        virtual void process(uint32_t index);
        virtual void allPortsReady();
    <%} else {%>
        virtual void process (Tuple const& tuple, uint32_t port);
    <%}%>

    virtual void prepareToShutdown();

    <%if ($isInConsistentRegion) {%>
        // Consistent region support
        virtual void checkpoint(Checkpoint & ckpt);
        virtual void reset(Checkpoint & ckpt);
        virtual void resetToInitialState();
    <%}%>

private:
    void initialize();
    std::string makeAbsolute(const std::string & path);
    inline void punctAndStatus(const std::string& pathName);
    void processOneFile (const std::string& pathName);
    <%if ($model->getNumberOfOutputPorts() == 2) {%>
        void sendStatus (const std::string& fName, int32 error);
    <%}%>
    <%if ($hasHeaderLine) {%>
        void initHeaderLineCount();
    <%}%>

    int32_t _fd;
    uint64_t _tupleNumber;
    <%if ($moveFileToDirectory) {%>
        SPL::AtomicRenamer _renamer;
    <%}%>
    <%if($defaultTuple) {%>
        <%=$defaultTupleType%> _defaultTuple;
    <%}%>
    <%if ($encoding) {%>
        std::string _encoding;
    <%}%>
    <%if ($ignoreOpenErrors) {%>
        bool _ignoreOpenErrors;
    <%}%>
    <%if (!$file) {%>
        bool _firstTime;
        Mutex _mutex;
    <%}%>
    <%unless ($hotFile) {%>
        std::auto_ptr<boost::iostreams::file_descriptor_source> _fd_src;
    <%}%>
    std::auto_ptr<boost::iostreams::filtering_streambuf<boost::iostreams::input> > _filt_str;
    <%if ($binary) {%>
        std::auto_ptr<std::iostream> _fs;
    <%} else {%>
        std::auto_ptr<std::istream> _fs;
    <%}%>
    <%if ($readPunctuations) {%>
        bool _sawFinal;
    <%}%>
    Metric& _numFilesOpenedMetric;
    Metric& _numInvalidTuples;

    <%if ($isInConsistentRegion) {%>
        // Consistent Region
        ConsistentRegionContext *_crContext;
    <%}%>
    std::streamoff _position;
    <%if ($isInConsistentRegion) {%>
    Mutex _crMutex;
    <%}%>
    bool _reset;
    // When FileSource is a start operator, this indicates
    // whether the file has been opened yet.
    bool _initialized;

    <%if ($hasHeaderLine) {%>
    uint32_t _headerLineCount;
    <%}%>
};

<%SPL::CodeGen::headerEpilogue($model);%>
