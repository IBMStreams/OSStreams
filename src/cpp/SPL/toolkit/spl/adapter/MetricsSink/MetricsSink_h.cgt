/*
 * Copyright 2021 IBM Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

<%
    use MetricsSinkCommon;
    MetricsSinkCommon::verify($model);

    my $metrics = $model->getParameterByName("metrics");
    my $names = $model->getParameterByName("names");
    my $descriptions = $model->getParameterByName("descriptions");
    my $initialValues = $model->getParameterByName("initialValues");
    my @includes;
    my $ckptKind = $model->getContext()->getCheckpointingKind();
    my $isInConsistentRegion = $model->getContext()->getOptionalContext("ConsistentRegion");
    if ($isInConsistentRegion or $ckptKind ne "none") {
        push @includes, "#include <SPL/Runtime/Operator/State/StateHandler.h>";
    }

    push @includes, "#include <SPL/Runtime/Common/Metric.h>";
%>

<%SPL::CodeGen::headerPrologue($model,\@includes);%>

class MY_OPERATOR : public MY_BASE_OPERATOR<%if ($isInConsistentRegion or $ckptKind ne "none") {%>, public StateHandler<%}%>
{
  public:
    MY_OPERATOR();

    void process(Tuple const & tuple, uint32_t port);

<% if ($isInConsistentRegion or $ckptKind ne "none") { %>
    virtual void checkpoint(Checkpoint & ckpt);
    virtual void reset(Checkpoint & ckpt);
    virtual void resetToInitialState();
<% } %>

  private:
    Mutex _mutex;
    Metric* _metrics[<%=$metrics->getNumberOfValues()%>];
};

<%SPL::CodeGen::headerEpilogue($model);%>
