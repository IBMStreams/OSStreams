<?xml version="1.0" encoding="UTF-8" ?>
<reference id="spldoc_reference_function_model">
<title>Modelo de función SPL</title>
<refbody>
<section id="overview">
<p>
El archivo de modelo de función está estructurado como una secuencia
de una o varios elementos functionSet.
El elemento functionSet representa el conjunto de funciones nativos
declaradas dentro o incluidas de un archivo de cabecera C++.
</p>
</section>
<section id="functionset">
<dl>
  <dlentry id="functionset__headerfilename">
    <dt>Nombre de archivo de cabecera</dt>
    <dd>Contiene el nombre del archivo de cabecera que declara las
funciones C++ o incluye otros archivos de cabecera que las declaran.
    </dd>
  </dlentry>
  <dlentry id="functionset__cppnamespacename">
    <dt>Nombre de espacio de nombres CPP (Opcional)</dt>
    <dd>El segundo elemento (opcional) se denomina cppNamespacename,
que proporcione el espacio de nombres C++ para las funciones. Si el
elemento cppNamespacename no está presenta, se utiliza el espacio de
nombres
SPL con "." convertido a "::".
    </dd>
  </dlentry>
  <dlentry id="functionset__functions">
    <dt>Funciones</dt>
    <dd>Una secuencia de uno varios elementos de función, cada uno
representa una firma de función nativa en formato SPL.
      <dl>
        <dlentry id="functionset__functions__description">
          <dt>Descripción</dt>
          <dd>Una descripción de la función.</dd>
        </dlentry>
        <dlentry id="functionset__functions__prototype">
          <dt>Prototipo</dt>
          <dd>El prototipo de la función nativa.  Los prototipos
de función nativa se declaran con sintaxis SPL, que está descrita
en la  <i>especificación de lenguaje de proceso IBMStreams.</i></dd>
        </dlentry>
        <dlentry id="functionset__functions__cppname">
          <dt>Nombre de CPP (Opcional)</dt>
          <dd>Especifica el nombre C++ de la función. Si no está
presente, se utiliza el nombre de función SPL.
          </dd>
        </dlentry>
      </dl>
    </dd>
  </dlentry>
  <dlentry id="functionset__dependencies">
    <dt>Dependencias (Opcional)</dt>
    <dd>Una secuencia de uno o más elementos de biblioteca, cada uno
representa una dependencia de biblioteca.
El formato del elemento de biblioteca es exactamente igual que el
que se utiliza para modelos de operador.
     <dl>
        <dlentry id="functionset__dependencies__description">
          <dt>Descripción (Opcional)</dt>
          <dd>Una descripción de la biblioteca.
          </dd>
        </dlentry>
        <dlentry id="functionset__dependencies__managedlibrary">
          <dt>Biblioteca gestionada</dt>
          <dd>Especifica los detalles de los artefactos de
biblioteca individuales. Las vías de acceso pueden contener variables
de entorno incorporadas entre signos @ (por ejemplo: <tt>@FOO_FFT_HOME@/lib</tt>),
que el compilador SPL resolverá por completo durante la
compilación.
            <dl>
              <dlentry id="functionset__dependencies__managedlibrary_lib">
                <dt>lib (Opcional)</dt>
                <dd>Especifica un nombre que se pasará al compilador de C++ <tt>-l</tt> argumento
(como <tt>fft</tt> which will be translated into <tt>-lfft</tt> cuando pase al enlazador)
                </dd>
              </dlentry>
              <dlentry id="functionset__dependencies__managedlibrary_libPath">
                <dt>libPath (Opcional)</dt>
                <dd>Especifica una vía de acceso que se pasará
al argumento <tt>-L</tt> del compilador C++.
                </dd>
              </dlentry>
              <dlentry id="functionset__dependencies__managedlibrary_includePath">
                <dt>includePath (Opcional)</dt>
                <dd>Especifica una vía de acceso que se pasará al argumento <tt>-I</tt> del compilador C++.
                </dd>
              </dlentry>
              <dlentry id="functionset__dependencies__managedlibrary_command">
                <dt>command (Opcional)</dt>
                <dd>Una vía de acceso de un programa que se ejecutará
para recuperar información de <tt>includePath, libPath</tt>y <tt>lib</tt>
. Si la vía de acceso del programa es relativa, se da por supuesto
que está enraizada en el directorio del modelo de operador. El
programa se ejecta tres veces, cada vez con un argumento diferente, a
saber <tt>lib, libPath</tt>y <tt>includePath</tt>. La salida
estándar de estas ejecuciones se leerá y cada línea (recortada
de espacios en blanco) se añadirá a los elementos <tt>lib, libPath</tt>y <tt>includePath</tt> , en función del tipo de la ejecución. Se
ignorará un línea que empieza con #. Se da por supuesto que las vías
de acceso están enraizadas en el directorio donde reside el
documento XML del modelo de operador.
                </dd>
              </dlentry>
            </dl>
          </dd>
        </dlentry>
    </dl>
    </dd>
  </dlentry>
</dl>
</section>
<section id="example">
  <title outputclass="splhead-1">Ejemplo</title>
  <!-- START NON-TRANSLATABLE -->
  <pre>
  &lt;functionModel
   xmlns="http://www.ibm.com/xmlns/prod/streams/spl/function"
   xmlns:cmn="http://www.ibm.com/xmlns/prod/streams/spl/common"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://www.ibm.com/xmlns/prod/streams/spl/function functionModel.xsd"&gt;
  &lt;functionSet&gt;
    &lt;!-- header file to include from within C++ code --&gt;
    &lt;headerFileName&gt;Sample.h&lt;/headerFileName&gt;
    &lt;!-- functions lists the SPL prototypes of the functions implemented in this library --&gt;
    &lt;functions&gt;
      &lt;!-- use of CDATA allows easy use of &lt; in the prototypyes --&gt;
      &lt;function&gt;
        &lt;description&gt;Increment all list elements by a given amount&lt;/description&gt;
        &lt;prototype cppName="increment_by"&gt;&lt;![CDATA[ void incrementBy(mutable list&lt;int32&gt; l, int32 incr) ]]&gt;&lt;/prototype&gt;
      &lt;/function&gt;
      &lt;function&gt;
        &lt;description&gt;Join two lists&lt;/description&gt;
        &lt;prototype&gt;&lt;![CDATA[ list&lt;int32&gt; joinLists(list&lt;int32&gt; a, list&lt;int32&gt; b) ]]&gt;&lt;/prototype&gt;
      &lt;/function&gt;
    &lt;/functions&gt;
    &lt;dependencies&gt;
      &lt;!-- This library can have several dependencies. We only use one here --&gt;
      &lt;library&gt;
        &lt;!-- A description for this library --&gt;
        &lt;cmn:description&gt;Sample-Functions&lt;/cmn:description&gt;
        &lt;cmn:managedLibrary&gt;
          &lt;!-- the name of the library for linking. Will be used as -lSample --&gt;
          &lt;cmn:lib&gt;Sample&lt;/cmn:lib&gt;
          &lt;!-- Where to find the library. Relative to the current directory.
               Will be used as -L&lt;dir&gt;/lib --&gt;
          &lt;cmn:libPath&gt;lib&lt;/cmn:libPath&gt;
          &lt;!-- Where to find the include file. Relative to the current directory.
               Will be used as -I&lt;dir&gt; --&gt;
          &lt;cmn:includePath&gt;./&lt;/cmn:includePath&gt;
        &lt;/cmn:managedLibrary&gt;
      &lt;/library&gt;
    &lt;/dependencies&gt;
  &lt;/functionSet&gt;
&lt;/functionModel&gt;
</pre>
<!-- END NON-TRANSLATABLE -->
</section>
</refbody>
</reference>
