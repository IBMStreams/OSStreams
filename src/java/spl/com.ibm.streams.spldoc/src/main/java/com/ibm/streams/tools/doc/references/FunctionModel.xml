<?xml version="1.0" encoding="UTF-8" ?>
<reference id="spldoc_reference_function_model">
<title>SPL Function Model</title>
<refbody>
<section id="overview">
<p>
The function model file is structured as a sequence of one or more functionSet elements.
The functionSet element represents the set of native functions declared within or included
from a C++ header file.
</p>
</section>
<section id="functionset">
<dl>
  <dlentry id="functionset__headerfilename">
    <dt>Header File Name</dt>
    <dd>Contains the name of the header file that declares the C++ functions or
includes other header files that declare them.
    </dd>
  </dlentry>
  <dlentry id="functionset__cppnamespacename">
    <dt>CPP Namespace Name (Optional)</dt>
    <dd>The second (optional) element is named cppNamespacename, which gives the
C++ namespace for the functions. If the cppNamespacename element is not present, the SPL namespace,
with "." converted to "::" is used.
    </dd>
  </dlentry>
  <dlentry id="functionset__functions">
    <dt>Functions</dt>
    <dd>A sequence of one or more function elements, each representing a native function signature in SPL format.
      <dl>
        <dlentry id="functionset__functions__description">
          <dt>Description</dt>
          <dd>A description of the function</dd>
        </dlentry>
        <dlentry id="functionset__functions__prototype">
          <dt>Prototype</dt>
          <dd>The prototype of the native function.  Native function prototypes are declared with SPL syntax,
which is described in the  <i>IBMStreams Processing Language Specification.</i></dd>
        </dlentry>
        <dlentry id="functionset__functions__cppname">
          <dt>CPP Name (Optional)</dt>
          <dd>Specifies the C++ name of the function. If not present, the SPL function name is used.
          </dd>
        </dlentry>
      </dl>
    </dd>
  </dlentry>
  <dlentry id="functionset__dependencies">
    <dt>Dependencies (Optional)</dt>
    <dd>A sequence of one or more library elements, each representing a library dependency.
The library element format is exactly the same as the one used for operator models.
     <dl>
        <dlentry id="functionset__dependencies__description">
          <dt>Description (Optional)</dt>
          <dd>A description of the library
          </dd>
        </dlentry>
        <dlentry id="functionset__dependencies__managedlibrary">
          <dt>Managed Library</dt>
          <dd>Specifies the details of the individual library artifacts. The paths can
contain environment variables embedded between @ signs (for example: <tt>@FOO_FFT_HOME@/lib</tt>),
which will be fully resolved by the SPL compiler at compile time.
            <dl>
              <dlentry id="functionset__dependencies__managedlibrary_lib">
                <dt>lib (Optional)</dt>
                <dd>Specifies a name to be passed to C++ compiler's <tt>-l</tt> argument
(such as <tt>fft</tt> which will be translated into <tt>-lfft</tt> when passed to the linker)
                </dd>
              </dlentry>
              <dlentry id="functionset__dependencies__managedlibrary_libPath">
                <dt>libPath (Optional)</dt>
                <dd>Specifies a path to be passed to C++ compiler's <tt>-L</tt> argument.
                </dd>
              </dlentry>
              <dlentry id="functionset__dependencies__managedlibrary_includePath">
                <dt>includePath (Optional)</dt>
                <dd>Specifies a path to be passed to C++ compiler's <tt>-I</tt> argument.
                </dd>
              </dlentry>
              <dlentry id="functionset__dependencies__managedlibrary_command">
                <dt>command (Optional)</dt>
                <dd>A path to a program that will be executed to retrieve <tt>includePath, libPath</tt>, and <tt>lib</tt>
information. If the path to the program is relative, it is assumed to be rooted at the directory of the
operator model. The program is executed three times, each time with a different argument, namely <tt>lib,
libPath</tt>, and <tt>includePath</tt>. The standard output from these executions will be read and each line
(trimmed of white spaces) will be added to one of the <tt>lib, libPath</tt>, and <tt>includePath</tt> elements, depending
on the type of the execution. A line that begins with # will be ignored. Relative paths are assumed to
be rooted at the directory where the operator model XML document resides.
                </dd>
              </dlentry>
            </dl>
          </dd>
        </dlentry>
    </dl>
    </dd>
  </dlentry>
</dl>
</section>
<section id="example">
  <title outputclass="splhead-1">Example</title>
  <!-- START NON-TRANSLATABLE -->
  <pre>
  &lt;functionModel
   xmlns="http://www.ibm.com/xmlns/prod/streams/spl/function"
   xmlns:cmn="http://www.ibm.com/xmlns/prod/streams/spl/common"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://www.ibm.com/xmlns/prod/streams/spl/function functionModel.xsd"&gt;
  &lt;functionSet&gt;
    &lt;!-- header file to include from within C++ code --&gt;
    &lt;headerFileName&gt;Sample.h&lt;/headerFileName&gt;
    &lt;!-- functions lists the SPL prototypes of the functions implemented in this library --&gt;
    &lt;functions&gt;
      &lt;!-- use of CDATA allows easy use of &lt; in the prototypyes --&gt;
      &lt;function&gt;
        &lt;description&gt;Increment all list elements by a given amount&lt;/description&gt;
        &lt;prototype cppName="increment_by"&gt;&lt;![CDATA[ void incrementBy(mutable list&lt;int32&gt; l, int32 incr) ]]&gt;&lt;/prototype&gt;
      &lt;/function&gt;
      &lt;function&gt;
        &lt;description&gt;Join two lists&lt;/description&gt;
        &lt;prototype&gt;&lt;![CDATA[ list&lt;int32&gt; joinLists(list&lt;int32&gt; a, list&lt;int32&gt; b) ]]&gt;&lt;/prototype&gt;
      &lt;/function&gt;
    &lt;/functions&gt;
    &lt;dependencies&gt;
      &lt;!-- This library can have several dependencies. We only use one here --&gt;
      &lt;library&gt;
        &lt;!-- A description for this library --&gt;
        &lt;cmn:description&gt;Sample-Functions&lt;/cmn:description&gt;
        &lt;cmn:managedLibrary&gt;
          &lt;!-- the name of the library for linking. Will be used as -lSample --&gt;
          &lt;cmn:lib&gt;Sample&lt;/cmn:lib&gt;
          &lt;!-- Where to find the library. Relative to the current directory.
               Will be used as -L&lt;dir&gt;/lib --&gt;
          &lt;cmn:libPath&gt;lib&lt;/cmn:libPath&gt;
          &lt;!-- Where to find the include file. Relative to the current directory.
               Will be used as -I&lt;dir&gt; --&gt;
          &lt;cmn:includePath&gt;./&lt;/cmn:includePath&gt;
        &lt;/cmn:managedLibrary&gt;
      &lt;/library&gt;
    &lt;/dependencies&gt;
  &lt;/functionSet&gt;
&lt;/functionModel&gt;
</pre>
<!-- END NON-TRANSLATABLE -->
</section>
</refbody>
</reference>
