<?xml version="1.0" encoding="UTF-8" ?>
<reference id="spldoc_reference_function_model">
<title>SPL 函数模型</title>
<refbody>
<section id="overview">
<p>
函数模型文件作为一个或多个 functionSet 元素的序列构造。
functionSet 元素表示 C++ 头文件中声明的或包含的本机函数集。
</p>
</section>
<section id="functionset">
<dl>
  <dlentry id="functionset__headerfilename">
    <dt>头文件名</dt>
    <dd>包含头文件的名称，此头文件用于声明 C++ 函数或包含声明这些函数的其他头文件。
    </dd>
  </dlentry>
  <dlentry id="functionset__cppnamespacename">
    <dt>CPP 名称空间名称（可选）</dt>
    <dd>第二个（可选）元素名为 cppNamespacename，用于提供函数的 C++ 名称空间。如果不存在 cppNamespacename 元素，那么会使用 SPL 名称空间（将“.”转换为“::”）。
    </dd>
  </dlentry>
  <dlentry id="functionset__functions">
    <dt>函数</dt>
    <dd>一个或多个函数元素的序列，每个元素表示一个采用 SPL 格式的本机函数签名。
      <dl>
        <dlentry id="functionset__functions__description">
          <dt>描述</dt>
          <dd>函数的描述</dd>
        </dlentry>
        <dlentry id="functionset__functions__prototype">
          <dt>原型</dt>
          <dd>本机函数的原型。本机函数原型在 SPL 语法中声明，该语法在《IBM Streams 处理语言规范》<i></i></dd>
        </dlentry>
        <dlentry id="functionset__functions__cppname">
          <dt>CPP 名称（可选）</dt>
          <dd>指定函数的 C++ 名称。如果不存在，那么会使用 SPL 函数名称。
          </dd>
        </dlentry>
      </dl>
    </dd>
  </dlentry>
  <dlentry id="functionset__dependencies">
    <dt>依赖关系（可选）</dt>
    <dd>一个或多个库元素的序列，每个元素表示一个库依赖关系。
库元素格式与用于操作程序模型的库元素格式完全相同。
     <dl>
        <dlentry id="functionset__dependencies__description">
          <dt>描述（可选）</dt>
          <dd>库的描述
          </dd>
        </dlentry>
        <dlentry id="functionset__dependencies__managedlibrary">
          <dt>受管库</dt>
          <dd>指定单个库工件的详细信息。路径可包含在 @ 符号之间嵌入的环境变量（例如：<tt>@FOO_FFT_HOME@/lib</tt>），这些变量在编译时通过 SPL 编译器进行充分解析。
            <dl>
              <dlentry id="functionset__dependencies__managedlibrary_lib">
                <dt>lib（可选）</dt>
                <dd>指定将传递到 C++ 编译器的 <tt>-l</tt> 自变量的名称（例如 <tt>fft</tt> 在传递到链接器时将转换为 <tt>-lfft</tt>）
                </dd>
              </dlentry>
              <dlentry id="functionset__dependencies__managedlibrary_libPath">
                <dt>libPath（可选）</dt>
                <dd>指定将传递到 C++ 编译器的 <tt>-L</tt> 自变量的路径。
                </dd>
              </dlentry>
              <dlentry id="functionset__dependencies__managedlibrary_includePath">
                <dt>includePath（可选）</dt>
                <dd>指定将传递到 C++ 编译器的 <tt>-I</tt> 自变量的路径。
                </dd>
              </dlentry>
              <dlentry id="functionset__dependencies__managedlibrary_command">
                <dt>command（可选）</dt>
                <dd>程序的路径，将执行此程序以检索 <tt>includePath、libPath</tt> 和 <tt>lib</tt> 信息。如果程序的路径是相对路径，那么假定其为操作程序模型的根目录。将执行程序三次，每次使用不同自变量（即 <tt>lib、libPath</tt> 和 <tt>includePath</tt>）执行。将读取这些执行的标准输出，且会根据执行类型，向 <tt>lib、libPath</tt> 和 <tt>includePath</tt> 元素中的一个元素添加每行（删除空格）。将忽略以 # 开头的行。假定相对路径为操作程序模型 XML 文档所在的根目录。
                </dd>
              </dlentry>
            </dl>
          </dd>
        </dlentry>
    </dl>
    </dd>
  </dlentry>
</dl>
</section>
<section id="example">
  <title outputclass="splhead-1">示例</title>
  <!-- START NON-TRANSLATABLE -->
  <pre>
  &lt;functionModel
   xmlns="http://www.ibm.com/xmlns/prod/streams/spl/function"
   xmlns:cmn="http://www.ibm.com/xmlns/prod/streams/spl/common"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://www.ibm.com/xmlns/prod/streams/spl/function functionModel.xsd"&gt;
  &lt;functionSet&gt;
    &lt;!-- header file to include from within C++ code --&gt;
    &lt;headerFileName&gt;Sample.h&lt;/headerFileName&gt;
    &lt;!-- functions lists the SPL prototypes of the functions implemented in this library --&gt;
    &lt;functions&gt;
      &lt;!-- use of CDATA allows easy use of &lt; in the prototypyes --&gt;
      &lt;function&gt;
        &lt;description&gt;Increment all list elements by a given amount&lt;/description&gt;
        &lt;prototype cppName="increment_by"&gt;&lt;![CDATA[ void incrementBy(mutable list&lt;int32&gt; l, int32 incr) ]]&gt;&lt;/prototype&gt;
      &lt;/function&gt;
      &lt;function&gt;
        &lt;description&gt;Join two lists&lt;/description&gt;
        &lt;prototype&gt;&lt;![CDATA[ list&lt;int32&gt; joinLists(list&lt;int32&gt; a, list&lt;int32&gt; b) ]]&gt;&lt;/prototype&gt;
      &lt;/function&gt;
    &lt;/functions&gt;
    &lt;dependencies&gt;
      &lt;!-- This library can have several dependencies. We only use one here --&gt;
      &lt;library&gt;
        &lt;!-- A description for this library --&gt;
        &lt;cmn:description&gt;Sample-Functions&lt;/cmn:description&gt;
        &lt;cmn:managedLibrary&gt;
          &lt;!-- the name of the library for linking. Will be used as -lSample --&gt;
          &lt;cmn:lib&gt;Sample&lt;/cmn:lib&gt;
          &lt;!-- Where to find the library. Relative to the current directory.
               Will be used as -L&lt;dir&gt;/lib --&gt;
          &lt;cmn:libPath&gt;lib&lt;/cmn:libPath&gt;
          &lt;!-- Where to find the include file. Relative to the current directory.
               Will be used as -I&lt;dir&gt; --&gt;
          &lt;cmn:includePath&gt;./&lt;/cmn:includePath&gt;
        &lt;/cmn:managedLibrary&gt;
      &lt;/library&gt;
    &lt;/dependencies&gt;
  &lt;/functionSet&gt;
&lt;/functionModel&gt;
</pre>
<!-- END NON-TRANSLATABLE -->
</section>
</refbody>
</reference>
