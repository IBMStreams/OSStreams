<?xml version="1.0" encoding="UTF-8" ?>
<reference id="spldoc_reference_function_model">
<title>SPL 함수 모델</title>
<refbody>
<section id="overview">
<p>
함수 모델 파일은 하나 이상의 functionSet 요소의 시퀀스로 구조화됩니다.
functionSet 요소는 내부에서 C++ 헤더 파일에서 선언되거나 포함된 원시(native) 함수 세트를 나타냅니다.
</p>
</section>
<section id="functionset">
<dl>
  <dlentry id="functionset__headerfilename">
    <dt>헤더 파일 이름</dt>
    <dd>C++ 함수를 선언하거나 이러한 함수를 선언하는 다른 헤더 파일을 포함시키는 헤더 파일의 이름을 포함합니다.
    </dd>
  </dlentry>
  <dlentry id="functionset__cppnamespacename">
    <dt>CPP 네임스페이스 이름(선택사항)</dt>
    <dd>두 번째(선택적) 요소의 이름은 cppNamespacename이며 함수의 C++ 네임스페이스를 제공합니다. cppNamespacename 요소가 없는 경우에는 "." 이 "::"으로 변환된 SPL 네임스페이스가 사용됩니다.
    </dd>
  </dlentry>
  <dlentry id="functionset__functions">
    <dt>함수</dt>
    <dd>각각 SPL 형식의 원시(native) 함수 시그니처를 나타내는, 하나 이상의 함수 요소의 시퀀스입니다.
      <dl>
        <dlentry id="functionset__functions__description">
          <dt>설명</dt>
          <dd>함수에 대한 설명입니다.</dd>
        </dlentry>
        <dlentry id="functionset__functions__prototype">
          <dt>프로토타입</dt>
          <dd>원시(native) 함수의 프로토타입입니다.  원시(native) 함수 프로토타입은 SPL 구문을 사용하여 선언되며, 이는 <i>IBM Streams Processing Language 스펙</i>에 설명되어 있습니다.</dd>
        </dlentry>
        <dlentry id="functionset__functions__cppname">
          <dt>CPP 이름(선택사항)</dt>
          <dd>함수의 C++ 이름을 지정합니다. 없는 경우에는 SPL 함수 이름이 사용됩니다.
          </dd>
        </dlentry>
      </dl>
    </dd>
  </dlentry>
  <dlentry id="functionset__dependencies">
    <dt>종속성(선택사항)</dt>
    <dd>각각 라이브러리 종속성을 나타내는, 하나 이상의 라이브러리 요소의 시퀀스입니다.
라이브러리 요소 형식은 연산자 모델에 대해 사용되는 형식과 정확히 같습니다.
     <dl>
        <dlentry id="functionset__dependencies__description">
          <dt>설명(선택사항)</dt>
          <dd>라이브러리에 대한 설명입니다.
          </dd>
        </dlentry>
        <dlentry id="functionset__dependencies__managedlibrary">
          <dt>관리 라이브러리</dt>
          <dd>개별 라이브러리 아티팩트의 세부사항을 지정합니다. 경로는 @ 부호로 묶인 환경 변수를 포함할 수 있으며(예: <tt>@FOO_FFT_HOME@/lib</tt>), 이는 컴파일 시간에 SPL 컴파일러에 의해 완전히 분석됩니다.
            <dl>
              <dlentry id="functionset__dependencies__managedlibrary_lib">
                <dt>lib(선택사항)</dt>
                <dd>C++ 컴파일러의 <tt>-l</tt> 인수에 전달할 이름을
지정합니다(예: <tt>fft</tt>는 링커에 전달될 때 <tt>-lfft</tt>로 변환됨).
                </dd>
              </dlentry>
              <dlentry id="functionset__dependencies__managedlibrary_libPath">
                <dt>libPath(선택사항)</dt>
                <dd>C++ 컴파일러의 <tt>-L</tt> 인수에 전달될 경로를 지정합니다.
                </dd>
              </dlentry>
              <dlentry id="functionset__dependencies__managedlibrary_includePath">
                <dt>includePath(선택사항)</dt>
                <dd>C++ 컴파일러의 <tt>-I</tt> 인수에 전달될 경로를 지정합니다.
                </dd>
              </dlentry>
              <dlentry id="functionset__dependencies__managedlibrary_command">
                <dt>command(선택사항)</dt>
                <dd>프로그램에 대한 경로로, 이 프로그램은 <tt>includePath, libPath</tt> 및 <tt>lib</tt>
정보를 검색하기 위해 실행됩니다. 프로그램에 대한 경로가 상대적인 경우에는 연산자 모델의 디렉토리를 루트로
간주합니다. 프로그램은 세 번 실행되며 매번 다른 인수, 즉 <tt>lib, libPath</tt> 및 <tt>includePath</tt>를
사용하여 실행됩니다. 이러한 실행의 표준 출력이 읽히며 각 행(공백으로 앞뒤가 구분되어 있음)이 실행의 유형에 따라
<tt>lib, libPath</tt> 및 <tt>includePath</tt> 요소 중 하나에 추가됩니다. #으로 시작되는 행은 무시됩니다. 상대적 경로의 경우에는 연산자 모델 XML 문서가 있는 디렉토리가 루트로 간주됩니다.
                </dd>
              </dlentry>
            </dl>
          </dd>
        </dlentry>
    </dl>
    </dd>
  </dlentry>
</dl>
</section>
<section id="example">
  <title outputclass="splhead-1">예</title>
  <!-- START NON-TRANSLATABLE -->
  <pre>
  &lt;functionModel
   xmlns="http://www.ibm.com/xmlns/prod/streams/spl/function"
   xmlns:cmn="http://www.ibm.com/xmlns/prod/streams/spl/common"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://www.ibm.com/xmlns/prod/streams/spl/function functionModel.xsd"&gt;
  &lt;functionSet&gt;
    &lt;!-- header file to include from within C++ code --&gt;
    &lt;headerFileName&gt;Sample.h&lt;/headerFileName&gt;
    &lt;!-- functions lists the SPL prototypes of the functions implemented in this library --&gt;
    &lt;functions&gt;
      &lt;!-- use of CDATA allows easy use of &lt; in the prototypyes --&gt;
      &lt;function&gt;
        &lt;description&gt;Increment all list elements by a given amount&lt;/description&gt;
        &lt;prototype cppName="increment_by"&gt;&lt;![CDATA[ void incrementBy(mutable list&lt;int32&gt; l, int32 incr) ]]&gt;&lt;/prototype&gt;
      &lt;/function&gt;
      &lt;function&gt;
        &lt;description&gt;Join two lists&lt;/description&gt;
        &lt;prototype&gt;&lt;![CDATA[ list&lt;int32&gt; joinLists(list&lt;int32&gt; a, list&lt;int32&gt; b) ]]&gt;&lt;/prototype&gt;
      &lt;/function&gt;
    &lt;/functions&gt;
    &lt;dependencies&gt;
      &lt;!-- This library can have several dependencies. We only use one here --&gt;
      &lt;library&gt;
        &lt;!-- A description for this library --&gt;
        &lt;cmn:description&gt;Sample-Functions&lt;/cmn:description&gt;
        &lt;cmn:managedLibrary&gt;
          &lt;!-- the name of the library for linking. Will be used as -lSample --&gt;
          &lt;cmn:lib&gt;Sample&lt;/cmn:lib&gt;
          &lt;!-- Where to find the library. Relative to the current directory.
               Will be used as -L&lt;dir&gt;/lib --&gt;
          &lt;cmn:libPath&gt;lib&lt;/cmn:libPath&gt;
          &lt;!-- Where to find the include file. Relative to the current directory.
               Will be used as -I&lt;dir&gt; --&gt;
          &lt;cmn:includePath&gt;./&lt;/cmn:includePath&gt;
        &lt;/cmn:managedLibrary&gt;
      &lt;/library&gt;
    &lt;/dependencies&gt;
  &lt;/functionSet&gt;
&lt;/functionModel&gt;
</pre>
<!-- END NON-TRANSLATABLE -->
</section>
</refbody>
</reference>
