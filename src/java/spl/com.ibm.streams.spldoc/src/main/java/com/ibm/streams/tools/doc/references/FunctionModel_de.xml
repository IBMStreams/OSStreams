<?xml version="1.0" encoding="UTF-8" ?>
<reference id="spldoc_reference_function_model">
<title>SPL-Funktionsmodell</title>
<refbody>
<section id="overview">
<p>
Die Funktionsmodelldatei ist als Sequenz mit mindestens einem Element 'functionSet' strukturiert.
Das Element 'functionSet' stellt die Gruppe von nativen Funktionen dar, die darin deklariert oder aus einer C++-Headerdatei eingeschlossen sind.
</p>
</section>
<section id="functionset">
<dl>
  <dlentry id="functionset__headerfilename">
    <dt>Headerdateiname</dt>
    <dd>EnthÑlt den Namen der Headerdatei, die die C++-Funktionen deklariert oder andere Headerdateien enthÑlt, die sie deklarieren.
    </dd>
  </dlentry>
  <dlentry id="functionset__cppnamespacename">
    <dt>CPP-Namensbereichsname (optional)</dt>
    <dd>Das zweite (optionale) Element hei·t cppNamespacename und gibt den C++-Namensbereich fÅr die Funktionen an. Wenn das Element 'cppNamespacename' nicht vorhanden ist, wird der SPL-Namensbereich verwendet, wobei "." in "::" konvertiert wird.
    </dd>
  </dlentry>
  <dlentry id="functionset__functions">
    <dt>Funktionen</dt>
    <dd>Eine Sequenz mit mindestens einem Funktionselement, von denen jedes die Signatur einer nativen Funktion im SPL-Format darstellt.
      <dl>
        <dlentry id="functionset__functions__description">
          <dt>Beschreibung</dt>
          <dd>Eine Beschreibung der Funktion</dd>
        </dlentry>
        <dlentry id="functionset__functions__prototype">
          <dt>Prototyp</dt>
          <dd>Der Prototyp der nativen Funktion.  Prototypen von nativen Funktionen werden mit SPL-Syntax deklariert, die in der Spezifikation von IBM Streams Processing Language beschrieben wird.</dd>
        </dlentry>
        <dlentry id="functionset__functions__cppname">
          <dt>CPP-Name (optional)</dt>
          <dd>Gibt den C++-Namen der Funktion an. Fehlt diese Angabe, wird der SPL-Funktionsname verwendet.
          </dd>
        </dlentry>
      </dl>
    </dd>
  </dlentry>
  <dlentry id="functionset__dependencies">
    <dt>AbhÑngigkeiten (optional)</dt>
    <dd>Eine Sequenz mit mindestens einem Bibliothekselement, von denen jedes eine BibliotheksabhÑngigkeit darstellt.
Das Bibliothekselementformat stimmt mit dem fÅr Operatormodelle verwendeten Format exakt Åberein.
     <dl>
        <dlentry id="functionset__dependencies__description">
          <dt>Beschreibung (optional)</dt>
          <dd>Eine Beschreibung der Bibliothek
          </dd>
        </dlentry>
        <dlentry id="functionset__dependencies__managedlibrary">
          <dt>Verwaltete Bibliothek</dt>
          <dd>Gibt die Details der einzelnen Bibliotheksartefakte an. Die Pfade kînnen in @-Zeichen eingebettete Umgebungsvariablen (z. B.: <tt>@FOO_FFT_HOME@/lib</tt>) enthalten, die wÑhrend der Kompilierung vom SPL-Compiler aufgelîst werden.
            <dl>
              <dlentry id="functionset__dependencies__managedlibrary_lib">
                <dt>lib (optional)</dt>
                <dd>Gibt einen Namen an, der an das Argument <tt>-l</tt> des C++-Compilers Åbergeben werden soll (beispielsweise <tt>fft</tt>, was bei der öbergabe an den Linker in <tt>-lfft</tt> umgesetzt wird)
                </dd>
              </dlentry>
              <dlentry id="functionset__dependencies__managedlibrary_libPath">
                <dt>libPath (optional)</dt>
                <dd>Gibt einen Pfad an, der an das Argument <tt>-L</tt> des C++-Compilers Åbergeben werden soll.
                </dd>
              </dlentry>
              <dlentry id="functionset__dependencies__managedlibrary_includePath">
                <dt>includePath (optional)</dt>
                <dd>Gibt einen Pfad an, der an das Argument <tt>-I</tt> des C++-Compilers Åbergeben werden soll.
                </dd>
              </dlentry>
              <dlentry id="functionset__dependencies__managedlibrary_command">
                <dt>command (optional)</dt>
                <dd>Ein Pfad zu einem Programm, das zum Abrufen von <tt>includePath-, libPath-</tt> und <tt>lib</tt>-Informationen verwendet wird. Ist der Pfad zum Programm relativ, wird angenommen, dass er im Verzeichnis des Operatormodells beginnt. Das Programm wird dreimal ausgefÅhrt, wobei jedes Mal ein anderes Argument verwendet wird, nÑmlich <tt>lib, libPath</tt> und <tt>includePath</tt>. Die Standardausgabe dieser AusfÅhrungen wird gelesen und jede Zeile wird (mit abgeschnittenen Leerzeichen) abhÑngig vom Typ der AusfÅhrung einem der Elemente <tt>lib, libPath</tt> bzw. <tt>includePath</tt> hinzugefÅgt. Eine mit # beginnende Zeile wird ignoriert. Bei relativen Pfaden wird angenommen, dass sie in dem Verzeichnis beginnen, in dem sich das XML-Dokument fÅr das Operatormodell befindet.
                </dd>
              </dlentry>
            </dl>
          </dd>
        </dlentry>
    </dl>
    </dd>
  </dlentry>
</dl>
</section>
<section id="example">
  <title outputclass="splhead-1">Beispiel</title>
  <!-- START NON-TRANSLATABLE -->
  <pre>
  &lt;functionModel
   xmlns="http://www.ibm.com/xmlns/prod/streams/spl/function"
   xmlns:cmn="http://www.ibm.com/xmlns/prod/streams/spl/common"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://www.ibm.com/xmlns/prod/streams/spl/function functionModel.xsd"&gt;
  &lt;functionSet&gt;
    &lt;!-- header file to include from within C++ code --&gt;
    &lt;headerFileName&gt;Sample.h&lt;/headerFileName&gt;
    &lt;!-- functions lists the SPL prototypes of the functions implemented in this library --&gt;
    &lt;functions&gt;
      &lt;!-- use of CDATA allows easy use of &lt; in the prototypyes --&gt;
      &lt;function&gt;
        &lt;description&gt;Increment all list elements by a given amount&lt;/description&gt;
        &lt;prototype cppName="increment_by"&gt;&lt;![CDATA[ void incrementBy(mutable list&lt;int32&gt; l, int32 incr) ]]&gt;&lt;/prototype&gt;
      &lt;/function&gt;
      &lt;function&gt;
        &lt;description&gt;Join two lists&lt;/description&gt;
        &lt;prototype&gt;&lt;![CDATA[ list&lt;int32&gt; joinLists(list&lt;int32&gt; a, list&lt;int32&gt; b) ]]&gt;&lt;/prototype&gt;
      &lt;/function&gt;
    &lt;/functions&gt;
    &lt;dependencies&gt;
      &lt;!-- This library can have several dependencies. We only use one here --&gt;
      &lt;library&gt;
        &lt;!-- A description for this library --&gt;
        &lt;cmn:description&gt;Sample-Functions&lt;/cmn:description&gt;
        &lt;cmn:managedLibrary&gt;
          &lt;!-- the name of the library for linking. Will be used as -lSample --&gt;
          &lt;cmn:lib&gt;Sample&lt;/cmn:lib&gt;
          &lt;!-- Where to find the library. Relative to the current directory.
               Will be used as -L&lt;dir&gt;/lib --&gt;
          &lt;cmn:libPath&gt;lib&lt;/cmn:libPath&gt;
          &lt;!-- Where to find the include file. Relative to the current directory.
               Will be used as -I&lt;dir&gt; --&gt;
          &lt;cmn:includePath&gt;./&lt;/cmn:includePath&gt;
        &lt;/cmn:managedLibrary&gt;
      &lt;/library&gt;
    &lt;/dependencies&gt;
  &lt;/functionSet&gt;
&lt;/functionModel&gt;
</pre>
<!-- END NON-TRANSLATABLE -->
</section>
</refbody>
</reference>
