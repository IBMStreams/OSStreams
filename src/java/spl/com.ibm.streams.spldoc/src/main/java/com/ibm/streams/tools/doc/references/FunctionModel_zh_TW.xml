<?xml version="1.0" encoding="UTF-8" ?>
<reference id="spldoc_reference_function_model">
<title>SPL 函數模型</title>
<refbody>
<section id="overview">
<p>
函數模型檔是作為一連串的一個以上 functionSet 元素進行建構。
functionSet 元素代表在 C++ 標頭檔內宣告的原生函數集，或所包括的來自 C++ 標頭檔的原生函數集。
</p>
</section>
<section id="functionset">
<dl>
  <dlentry id="functionset__headerfilename">
    <dt>標頭檔名稱</dt>
    <dd>包含標頭檔的名稱，該標頭檔用來宣告 C++ 函數或包括其他用於宣告這些函數的標頭檔。
</dd>
  </dlentry>
  <dlentry id="functionset__cppnamespacename">
    <dt>CPP 名稱空間名稱（選用）</dt>
    <dd>第二個（選用）元素名為 cppNamespacename，用來提供函數的 C++ 名稱空間。如果不存在 cppNamespacename 元素，則將使用 SPL 名稱空間（將 "." 轉換為 "::"）。
</dd>
  </dlentry>
  <dlentry id="functionset__functions">
    <dt>函數</dt>
    <dd>一連串的一個以上元素，每一個都代表一個採用 SPL 格式的原生函數簽章。
<dl>
        <dlentry id="functionset__functions__description">
          <dt>說明</dt>
          <dd>函數的說明</dd>
        </dlentry>
        <dlentry id="functionset__functions__prototype">
          <dt>原型</dt>
          <dd>原生函數的原型。原生函數原型是使用 SPL 語法進行宣告，該 SPL 語法在《IBM Streams 處理語言規格<i></i>》中予以說明。</dd>
        </dlentry>
        <dlentry id="functionset__functions__cppname">
          <dt>CPP 名稱（選用）</dt>
          <dd>指定函數的 C++ 名稱。如果不存在，則將使用 SPL 函數名稱。
          </dd>
        </dlentry>
      </dl>
    </dd>
  </dlentry>
  <dlentry id="functionset__dependencies">
    <dt>相依關係（選用）</dt>
    <dd>一連串的一個以上程式庫元素，每一個元素都代表一種程式庫相依關係。程式庫元素格式與用於運算子模型的格式完全相同。
     <dl>
        <dlentry id="functionset__dependencies__description">
          <dt>說明（選用）</dt>
          <dd>程式庫的說明
          </dd>
        </dlentry>
        <dlentry id="functionset__dependencies__managedlibrary">
          <dt>受管理程式庫</dt>
          <dd>指定個別程式庫構件的詳細資料。路徑可以包含內嵌在 @ 符號之間的環境變數（例如：<tt>@FOO_FFT_HOME@/lib</tt>），這將在編譯時期由 SPL 編譯器充分予以解析。
            <dl>
              <dlentry id="functionset__dependencies__managedlibrary_lib">
                <dt>lib（選用）</dt>
                <dd>指定要傳遞至 C++ 編譯器之 <tt>-l</tt> 引數的名稱（例如，<tt>fft</tt> 在傳遞至鏈結器時，將轉換為 <tt>-lfft</tt>）</dd>
              </dlentry>
              <dlentry id="functionset__dependencies__managedlibrary_libPath">
                <dt>libPath（選用）</dt>
                <dd>指定要傳遞至 C++ 編譯器之 <tt>-L</tt> 引數的路徑。
                </dd>
              </dlentry>
              <dlentry id="functionset__dependencies__managedlibrary_includePath">
                <dt>includePath（選用）</dt>
                <dd>指定要傳遞至 C++ 編譯器之 <tt>-I</tt> 引數的路徑。
                </dd>
              </dlentry>
              <dlentry id="functionset__dependencies__managedlibrary_command">
                <dt>command（選用）</dt>
                <dd>程式的路徑，該程式將予以執行以擷取 <tt>includePath、libPath</tt> 及 <tt>lib</tt> 資訊。如果該程式的路徑是相對路徑，則假定其根目錄是運算子模型目錄。
該程式會執行 3 次，每次都帶有不同的引數，即 <tt>lib、libPath</tt> 和 <tt>includePath</tt>。將讀取這些執行中的標準輸出，並且每一行（已修整空格）都將新增至 <tt>lib、libPath</tt> 和 <tt>includePath</tt> 元素的其中一個，視執行的類型而定。
以 # 開頭的行將予以忽略。假定相對路徑的根目錄為運算子模型 XML 文件所在的目錄。
</dd>
              </dlentry>
            </dl>
          </dd>
        </dlentry>
    </dl>
    </dd>
  </dlentry>
</dl>
</section>
<section id="example">
  <title outputclass="splhead-1">範例</title>
  <!-- START NON-TRANSLATABLE -->
  <pre>
  &lt;functionModel
   xmlns="http://www.ibm.com/xmlns/prod/streams/spl/function"
   xmlns:cmn="http://www.ibm.com/xmlns/prod/streams/spl/common"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://www.ibm.com/xmlns/prod/streams/spl/function functionModel.xsd"&gt;
  &lt;functionSet&gt;
    &lt;!-- header file to include from within C++ code --&gt;
    &lt;headerFileName&gt;Sample.h&lt;/headerFileName&gt;
    &lt;!-- functions lists the SPL prototypes of the functions implemented in this library --&gt;
    &lt;functions&gt;
      &lt;!-- use of CDATA allows easy use of &lt; in the prototypyes --&gt;
      &lt;function&gt;
        &lt;description&gt;Increment all list elements by a given amount&lt;/description&gt;
        &lt;prototype cppName="increment_by"&gt;&lt;![CDATA[ void incrementBy(mutable list&lt;int32&gt; l, int32 incr) ]]&gt;&lt;/prototype&gt;
      &lt;/function&gt;
      &lt;function&gt;
        &lt;description&gt;Join two lists&lt;/description&gt;
        &lt;prototype&gt;&lt;![CDATA[ list&lt;int32&gt; joinLists(list&lt;int32&gt; a, list&lt;int32&gt; b) ]]&gt;&lt;/prototype&gt;
      &lt;/function&gt;
    &lt;/functions&gt;
    &lt;dependencies&gt;
      &lt;!-- This library can have several dependencies. We only use one here --&gt;
      &lt;library&gt;
        &lt;!-- A description for this library --&gt;
        &lt;cmn:description&gt;Sample-Functions&lt;/cmn:description&gt;
        &lt;cmn:managedLibrary&gt;
          &lt;!-- the name of the library for linking. Will be used as -lSample --&gt;
          &lt;cmn:lib&gt;Sample&lt;/cmn:lib&gt;
          &lt;!-- Where to find the library. Relative to the current directory.
               Will be used as -L&lt;dir&gt;/lib --&gt;
          &lt;cmn:libPath&gt;lib&lt;/cmn:libPath&gt;
          &lt;!-- Where to find the include file. Relative to the current directory.
               Will be used as -I&lt;dir&gt; --&gt;
          &lt;cmn:includePath&gt;./&lt;/cmn:includePath&gt;
        &lt;/cmn:managedLibrary&gt;
      &lt;/library&gt;
    &lt;/dependencies&gt;
  &lt;/functionSet&gt;
&lt;/functionModel&gt;
</pre>
<!-- END NON-TRANSLATABLE -->
</section>
</refbody>
</reference>
